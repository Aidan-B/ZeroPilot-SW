
safety-Interchip.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002078  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08002134  08002134  00012134  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002164  08002164  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002164  08002164  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002164  08002164  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002164  08002164  00012164  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002168  08002168  00012168  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800216c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000bc  2000000c  08002178  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000c8  08002178  000200c8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006b76  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001833  00000000  00000000  00026baa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000658  00000000  00000000  000283e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000580  00000000  00000000  00028a38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00010955  00000000  00000000  00028fb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000087ba  00000000  00000000  0003990d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0005d893  00000000  00000000  000420c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0009f95a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001474  00000000  00000000  0009f9b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000000c 	.word	0x2000000c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	0800211c 	.word	0x0800211c

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000010 	.word	0x20000010
 8000100:	0800211c 	.word	0x0800211c

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f806 	bl	8000218 <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__aeabi_idiv0>:
 8000218:	4770      	bx	lr
 800021a:	46c0      	nop			; (mov r8, r8)

0800021c <_Z14setSafetyLevelt>:

uint16_t getSafetyLevel() {
	return txData.safetyLevel;
}

void setSafetyLevel(uint16_t level) {
 800021c:	b580      	push	{r7, lr}
 800021e:	b082      	sub	sp, #8
 8000220:	af00      	add	r7, sp, #0
 8000222:	0002      	movs	r2, r0
 8000224:	1dbb      	adds	r3, r7, #6
 8000226:	801a      	strh	r2, [r3, #0]
	txData.safetyLevel = level;
 8000228:	4b03      	ldr	r3, [pc, #12]	; (8000238 <_Z14setSafetyLevelt+0x1c>)
 800022a:	1dba      	adds	r2, r7, #6
 800022c:	8812      	ldrh	r2, [r2, #0]
 800022e:	831a      	strh	r2, [r3, #24]
}
 8000230:	46c0      	nop			; (mov r8, r8)
 8000232:	46bd      	mov	sp, r7
 8000234:	b002      	add	sp, #8
 8000236:	bd80      	pop	{r7, pc}
 8000238:	20000044 	.word	0x20000044

0800023c <_Z15sendReceiveDatav>:

bool isDataNew() {
	return dataNew;
}

bool sendReceiveData() {
 800023c:	b590      	push	{r4, r7, lr}
 800023e:	b083      	sub	sp, #12
 8000240:	af00      	add	r7, sp, #0
	//for (int i = 0; i < 12; i++) txData.PWM[i] = i+1;
	txData.PWM[0] = 1;
 8000242:	4b1d      	ldr	r3, [pc, #116]	; (80002b8 <_Z15sendReceiveDatav+0x7c>)
 8000244:	2201      	movs	r2, #1
 8000246:	801a      	strh	r2, [r3, #0]
	txData.PWM[1] = 2;
 8000248:	4b1b      	ldr	r3, [pc, #108]	; (80002b8 <_Z15sendReceiveDatav+0x7c>)
 800024a:	2202      	movs	r2, #2
 800024c:	805a      	strh	r2, [r3, #2]
	txData.PWM[2] = 3;
 800024e:	4b1a      	ldr	r3, [pc, #104]	; (80002b8 <_Z15sendReceiveDatav+0x7c>)
 8000250:	2203      	movs	r2, #3
 8000252:	809a      	strh	r2, [r3, #4]
	txData.PWM[3] = 4;
 8000254:	4b18      	ldr	r3, [pc, #96]	; (80002b8 <_Z15sendReceiveDatav+0x7c>)
 8000256:	2204      	movs	r2, #4
 8000258:	80da      	strh	r2, [r3, #6]
	txData.PWM[4] = 5;
 800025a:	4b17      	ldr	r3, [pc, #92]	; (80002b8 <_Z15sendReceiveDatav+0x7c>)
 800025c:	2205      	movs	r2, #5
 800025e:	811a      	strh	r2, [r3, #8]
	txData.PWM[5] = 6;
 8000260:	4b15      	ldr	r3, [pc, #84]	; (80002b8 <_Z15sendReceiveDatav+0x7c>)
 8000262:	2206      	movs	r2, #6
 8000264:	815a      	strh	r2, [r3, #10]
	txData.PWM[6] = 7;
 8000266:	4b14      	ldr	r3, [pc, #80]	; (80002b8 <_Z15sendReceiveDatav+0x7c>)
 8000268:	2207      	movs	r2, #7
 800026a:	819a      	strh	r2, [r3, #12]
	txData.PWM[7] = 8;
 800026c:	4b12      	ldr	r3, [pc, #72]	; (80002b8 <_Z15sendReceiveDatav+0x7c>)
 800026e:	2208      	movs	r2, #8
 8000270:	81da      	strh	r2, [r3, #14]
	txData.PWM[8] = 9;
 8000272:	4b11      	ldr	r3, [pc, #68]	; (80002b8 <_Z15sendReceiveDatav+0x7c>)
 8000274:	2209      	movs	r2, #9
 8000276:	821a      	strh	r2, [r3, #16]
	txData.PWM[9] = 10;
 8000278:	4b0f      	ldr	r3, [pc, #60]	; (80002b8 <_Z15sendReceiveDatav+0x7c>)
 800027a:	220a      	movs	r2, #10
 800027c:	825a      	strh	r2, [r3, #18]
	txData.PWM[10] = 11;
 800027e:	4b0e      	ldr	r3, [pc, #56]	; (80002b8 <_Z15sendReceiveDatav+0x7c>)
 8000280:	220b      	movs	r2, #11
 8000282:	829a      	strh	r2, [r3, #20]
	txData.PWM[11] = 12;
 8000284:	4b0c      	ldr	r3, [pc, #48]	; (80002b8 <_Z15sendReceiveDatav+0x7c>)
 8000286:	220c      	movs	r2, #12
 8000288:	82da      	strh	r2, [r3, #22]
	txData.safetyLevel = 13;
 800028a:	4b0b      	ldr	r3, [pc, #44]	; (80002b8 <_Z15sendReceiveDatav+0x7c>)
 800028c:	220d      	movs	r2, #13
 800028e:	831a      	strh	r2, [r3, #24]
	//do some interrupt shit idk
	HAL_StatusTypeDef result = HAL_SPI_TransmitReceive_IT(&hspi1,(uint8_t *)&txData,(uint8_t *)&rxData, (sizeof(Interchip_Packet)/sizeof(int8_t)));
 8000290:	1dfc      	adds	r4, r7, #7
 8000292:	4a0a      	ldr	r2, [pc, #40]	; (80002bc <_Z15sendReceiveDatav+0x80>)
 8000294:	4908      	ldr	r1, [pc, #32]	; (80002b8 <_Z15sendReceiveDatav+0x7c>)
 8000296:	480a      	ldr	r0, [pc, #40]	; (80002c0 <_Z15sendReceiveDatav+0x84>)
 8000298:	231a      	movs	r3, #26
 800029a:	f001 fa6d 	bl	8001778 <HAL_SPI_TransmitReceive_IT>
 800029e:	0003      	movs	r3, r0
 80002a0:	7023      	strb	r3, [r4, #0]
	if(result != HAL_OK) {
 80002a2:	1dfb      	adds	r3, r7, #7
 80002a4:	781b      	ldrb	r3, [r3, #0]
 80002a6:	2b00      	cmp	r3, #0
 80002a8:	d001      	beq.n	80002ae <_Z15sendReceiveDatav+0x72>
		return false;
 80002aa:	2300      	movs	r3, #0
 80002ac:	e000      	b.n	80002b0 <_Z15sendReceiveDatav+0x74>
	}
	return true;
 80002ae:	2301      	movs	r3, #1
//	HAL_StatusTypeDef result = HAL_SPI_Transmit_IT(&hspi6,i, sizeof(int8_t));
//	if(result != HAL_OK) {
//				return false;
//			}
//			return true;
}
 80002b0:	0018      	movs	r0, r3
 80002b2:	46bd      	mov	sp, r7
 80002b4:	b003      	add	sp, #12
 80002b6:	bd90      	pop	{r4, r7, pc}
 80002b8:	20000044 	.word	0x20000044
 80002bc:	20000028 	.word	0x20000028
 80002c0:	20000060 	.word	0x20000060

080002c4 <_Z4initv>:

void init() {
 80002c4:	b580      	push	{r7, lr}
 80002c6:	af00      	add	r7, sp, #0
	MX_SPI1_Init();
 80002c8:	f000 f90e 	bl	80004e8 <MX_SPI1_Init>
}
 80002cc:	46c0      	nop			; (mov r8, r8)
 80002ce:	46bd      	mov	sp, r7
 80002d0:	bd80      	pop	{r7, pc}
	...

080002d4 <HAL_SPI_TxRxCpltCallback>:

void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef* hspi) {
 80002d4:	b580      	push	{r7, lr}
 80002d6:	b082      	sub	sp, #8
 80002d8:	af00      	add	r7, sp, #0
 80002da:	6078      	str	r0, [r7, #4]
	//HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, GPIO_PIN_RESET);
 80002dc:	2380      	movs	r3, #128	; 0x80
 80002de:	015b      	lsls	r3, r3, #5
 80002e0:	480c      	ldr	r0, [pc, #48]	; (8000314 <HAL_SPI_TxRxCpltCallback+0x40>)
 80002e2:	2200      	movs	r2, #0
 80002e4:	0019      	movs	r1, r3
 80002e6:	f000 fd23 	bl	8000d30 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, GPIO_PIN_RESET);
 80002ea:	2380      	movs	r3, #128	; 0x80
 80002ec:	011b      	lsls	r3, r3, #4
 80002ee:	4809      	ldr	r0, [pc, #36]	; (8000314 <HAL_SPI_TxRxCpltCallback+0x40>)
 80002f0:	2200      	movs	r2, #0
 80002f2:	0019      	movs	r1, r3
 80002f4:	f000 fd1c 	bl	8000d30 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_RESET);
 80002f8:	2380      	movs	r3, #128	; 0x80
 80002fa:	00db      	lsls	r3, r3, #3
 80002fc:	4805      	ldr	r0, [pc, #20]	; (8000314 <HAL_SPI_TxRxCpltCallback+0x40>)
 80002fe:	2200      	movs	r2, #0
 8000300:	0019      	movs	r1, r3
 8000302:	f000 fd15 	bl	8000d30 <HAL_GPIO_WritePin>

	dataNew = true;
 8000306:	4b04      	ldr	r3, [pc, #16]	; (8000318 <HAL_SPI_TxRxCpltCallback+0x44>)
 8000308:	2201      	movs	r2, #1
 800030a:	701a      	strb	r2, [r3, #0]
}
 800030c:	46c0      	nop			; (mov r8, r8)
 800030e:	46bd      	mov	sp, r7
 8000310:	b002      	add	sp, #8
 8000312:	bd80      	pop	{r7, pc}
 8000314:	48000800 	.word	0x48000800
 8000318:	2000005e 	.word	0x2000005e

0800031c <HAL_SPI_RxCpltCallback>:

void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef* hspi) {
 800031c:	b580      	push	{r7, lr}
 800031e:	b082      	sub	sp, #8
 8000320:	af00      	add	r7, sp, #0
 8000322:	6078      	str	r0, [r7, #4]
	//HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, GPIO_PIN_RESET);
 8000324:	2380      	movs	r3, #128	; 0x80
 8000326:	015b      	lsls	r3, r3, #5
 8000328:	480c      	ldr	r0, [pc, #48]	; (800035c <HAL_SPI_RxCpltCallback+0x40>)
 800032a:	2200      	movs	r2, #0
 800032c:	0019      	movs	r1, r3
 800032e:	f000 fcff 	bl	8000d30 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, GPIO_PIN_RESET);
 8000332:	2380      	movs	r3, #128	; 0x80
 8000334:	011b      	lsls	r3, r3, #4
 8000336:	4809      	ldr	r0, [pc, #36]	; (800035c <HAL_SPI_RxCpltCallback+0x40>)
 8000338:	2200      	movs	r2, #0
 800033a:	0019      	movs	r1, r3
 800033c:	f000 fcf8 	bl	8000d30 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_RESET);
 8000340:	2380      	movs	r3, #128	; 0x80
 8000342:	00db      	lsls	r3, r3, #3
 8000344:	4805      	ldr	r0, [pc, #20]	; (800035c <HAL_SPI_RxCpltCallback+0x40>)
 8000346:	2200      	movs	r2, #0
 8000348:	0019      	movs	r1, r3
 800034a:	f000 fcf1 	bl	8000d30 <HAL_GPIO_WritePin>
	dataNew = true;
 800034e:	4b04      	ldr	r3, [pc, #16]	; (8000360 <HAL_SPI_RxCpltCallback+0x44>)
 8000350:	2201      	movs	r2, #1
 8000352:	701a      	strb	r2, [r3, #0]
}
 8000354:	46c0      	nop			; (mov r8, r8)
 8000356:	46bd      	mov	sp, r7
 8000358:	b002      	add	sp, #8
 800035a:	bd80      	pop	{r7, pc}
 800035c:	48000800 	.word	0x48000800
 8000360:	2000005e 	.word	0x2000005e

08000364 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8000364:	b590      	push	{r4, r7, lr}
 8000366:	b089      	sub	sp, #36	; 0x24
 8000368:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800036a:	240c      	movs	r4, #12
 800036c:	193b      	adds	r3, r7, r4
 800036e:	0018      	movs	r0, r3
 8000370:	2314      	movs	r3, #20
 8000372:	001a      	movs	r2, r3
 8000374:	2100      	movs	r1, #0
 8000376:	f001 fec9 	bl	800210c <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800037a:	4b1d      	ldr	r3, [pc, #116]	; (80003f0 <MX_GPIO_Init+0x8c>)
 800037c:	695a      	ldr	r2, [r3, #20]
 800037e:	4b1c      	ldr	r3, [pc, #112]	; (80003f0 <MX_GPIO_Init+0x8c>)
 8000380:	2180      	movs	r1, #128	; 0x80
 8000382:	0289      	lsls	r1, r1, #10
 8000384:	430a      	orrs	r2, r1
 8000386:	615a      	str	r2, [r3, #20]
 8000388:	4b19      	ldr	r3, [pc, #100]	; (80003f0 <MX_GPIO_Init+0x8c>)
 800038a:	695a      	ldr	r2, [r3, #20]
 800038c:	2380      	movs	r3, #128	; 0x80
 800038e:	029b      	lsls	r3, r3, #10
 8000390:	4013      	ands	r3, r2
 8000392:	60bb      	str	r3, [r7, #8]
 8000394:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000396:	4b16      	ldr	r3, [pc, #88]	; (80003f0 <MX_GPIO_Init+0x8c>)
 8000398:	695a      	ldr	r2, [r3, #20]
 800039a:	4b15      	ldr	r3, [pc, #84]	; (80003f0 <MX_GPIO_Init+0x8c>)
 800039c:	2180      	movs	r1, #128	; 0x80
 800039e:	0309      	lsls	r1, r1, #12
 80003a0:	430a      	orrs	r2, r1
 80003a2:	615a      	str	r2, [r3, #20]
 80003a4:	4b12      	ldr	r3, [pc, #72]	; (80003f0 <MX_GPIO_Init+0x8c>)
 80003a6:	695a      	ldr	r2, [r3, #20]
 80003a8:	2380      	movs	r3, #128	; 0x80
 80003aa:	031b      	lsls	r3, r3, #12
 80003ac:	4013      	ands	r3, r2
 80003ae:	607b      	str	r3, [r7, #4]
 80003b0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);
 80003b2:	23e0      	movs	r3, #224	; 0xe0
 80003b4:	015b      	lsls	r3, r3, #5
 80003b6:	480f      	ldr	r0, [pc, #60]	; (80003f4 <MX_GPIO_Init+0x90>)
 80003b8:	2200      	movs	r2, #0
 80003ba:	0019      	movs	r1, r3
 80003bc:	f000 fcb8 	bl	8000d30 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC10 PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 80003c0:	193b      	adds	r3, r7, r4
 80003c2:	22e0      	movs	r2, #224	; 0xe0
 80003c4:	0152      	lsls	r2, r2, #5
 80003c6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003c8:	193b      	adds	r3, r7, r4
 80003ca:	2201      	movs	r2, #1
 80003cc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003ce:	193b      	adds	r3, r7, r4
 80003d0:	2200      	movs	r2, #0
 80003d2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003d4:	193b      	adds	r3, r7, r4
 80003d6:	2200      	movs	r2, #0
 80003d8:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80003da:	193b      	adds	r3, r7, r4
 80003dc:	4a05      	ldr	r2, [pc, #20]	; (80003f4 <MX_GPIO_Init+0x90>)
 80003de:	0019      	movs	r1, r3
 80003e0:	0010      	movs	r0, r2
 80003e2:	f000 fb35 	bl	8000a50 <HAL_GPIO_Init>

}
 80003e6:	46c0      	nop			; (mov r8, r8)
 80003e8:	46bd      	mov	sp, r7
 80003ea:	b009      	add	sp, #36	; 0x24
 80003ec:	bd90      	pop	{r4, r7, pc}
 80003ee:	46c0      	nop			; (mov r8, r8)
 80003f0:	40021000 	.word	0x40021000
 80003f4:	48000800 	.word	0x48000800

080003f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80003f8:	b580      	push	{r7, lr}
 80003fa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80003fc:	f000 f97c 	bl	80006f8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000400:	f000 f824 	bl	800044c <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000404:	f7ff ffae 	bl	8000364 <MX_GPIO_Init>

  /* USER CODE BEGIN 2 */
 // MX_SPI1_Init();
  init();
 8000408:	f7ff ff5c 	bl	80002c4 <_Z4initv>
  setSafetyLevel(12);
 800040c:	200c      	movs	r0, #12
 800040e:	f7ff ff05 	bl	800021c <_Z14setSafetyLevelt>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, GPIO_PIN_SET);
 8000412:	2380      	movs	r3, #128	; 0x80
 8000414:	015b      	lsls	r3, r3, #5
 8000416:	480c      	ldr	r0, [pc, #48]	; (8000448 <main+0x50>)
 8000418:	2201      	movs	r2, #1
 800041a:	0019      	movs	r1, r3
 800041c:	f000 fc88 	bl	8000d30 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, GPIO_PIN_SET);
 8000420:	2380      	movs	r3, #128	; 0x80
 8000422:	011b      	lsls	r3, r3, #4
 8000424:	4808      	ldr	r0, [pc, #32]	; (8000448 <main+0x50>)
 8000426:	2201      	movs	r2, #1
 8000428:	0019      	movs	r1, r3
 800042a:	f000 fc81 	bl	8000d30 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_SET);
 800042e:	2380      	movs	r3, #128	; 0x80
 8000430:	00db      	lsls	r3, r3, #3
 8000432:	4805      	ldr	r0, [pc, #20]	; (8000448 <main+0x50>)
 8000434:	2201      	movs	r2, #1
 8000436:	0019      	movs	r1, r3
 8000438:	f000 fc7a 	bl	8000d30 <HAL_GPIO_WritePin>

	  sendReceiveData();
 800043c:	f7ff fefe 	bl	800023c <_Z15sendReceiveDatav>

	  HAL_Delay(10);
 8000440:	200a      	movs	r0, #10
 8000442:	f000 f9bd 	bl	80007c0 <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, GPIO_PIN_SET);
 8000446:	e7e4      	b.n	8000412 <main+0x1a>
 8000448:	48000800 	.word	0x48000800

0800044c <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800044c:	b590      	push	{r4, r7, lr}
 800044e:	b091      	sub	sp, #68	; 0x44
 8000450:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000452:	2410      	movs	r4, #16
 8000454:	193b      	adds	r3, r7, r4
 8000456:	0018      	movs	r0, r3
 8000458:	2330      	movs	r3, #48	; 0x30
 800045a:	001a      	movs	r2, r3
 800045c:	2100      	movs	r1, #0
 800045e:	f001 fe55 	bl	800210c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000462:	003b      	movs	r3, r7
 8000464:	0018      	movs	r0, r3
 8000466:	2310      	movs	r3, #16
 8000468:	001a      	movs	r2, r3
 800046a:	2100      	movs	r1, #0
 800046c:	f001 fe4e 	bl	800210c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000470:	0021      	movs	r1, r4
 8000472:	187b      	adds	r3, r7, r1
 8000474:	2202      	movs	r2, #2
 8000476:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000478:	187b      	adds	r3, r7, r1
 800047a:	2201      	movs	r2, #1
 800047c:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800047e:	187b      	adds	r3, r7, r1
 8000480:	2210      	movs	r2, #16
 8000482:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000484:	187b      	adds	r3, r7, r1
 8000486:	2200      	movs	r2, #0
 8000488:	621a      	str	r2, [r3, #32]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800048a:	187b      	adds	r3, r7, r1
 800048c:	0018      	movs	r0, r3
 800048e:	f000 fc6d 	bl	8000d6c <HAL_RCC_OscConfig>
 8000492:	0003      	movs	r3, r0
 8000494:	1e5a      	subs	r2, r3, #1
 8000496:	4193      	sbcs	r3, r2
 8000498:	b2db      	uxtb	r3, r3
 800049a:	2b00      	cmp	r3, #0
 800049c:	d001      	beq.n	80004a2 <_Z18SystemClock_Configv+0x56>
  {
    Error_Handler();
 800049e:	f000 f81d 	bl	80004dc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004a2:	003b      	movs	r3, r7
 80004a4:	2207      	movs	r2, #7
 80004a6:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80004a8:	003b      	movs	r3, r7
 80004aa:	2200      	movs	r2, #0
 80004ac:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80004ae:	003b      	movs	r3, r7
 80004b0:	2200      	movs	r2, #0
 80004b2:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80004b4:	003b      	movs	r3, r7
 80004b6:	2200      	movs	r2, #0
 80004b8:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80004ba:	003b      	movs	r3, r7
 80004bc:	2100      	movs	r1, #0
 80004be:	0018      	movs	r0, r3
 80004c0:	f000 ff72 	bl	80013a8 <HAL_RCC_ClockConfig>
 80004c4:	0003      	movs	r3, r0
 80004c6:	1e5a      	subs	r2, r3, #1
 80004c8:	4193      	sbcs	r3, r2
 80004ca:	b2db      	uxtb	r3, r3
 80004cc:	2b00      	cmp	r3, #0
 80004ce:	d001      	beq.n	80004d4 <_Z18SystemClock_Configv+0x88>
  {
    Error_Handler();
 80004d0:	f000 f804 	bl	80004dc <Error_Handler>
  }
}
 80004d4:	46c0      	nop			; (mov r8, r8)
 80004d6:	46bd      	mov	sp, r7
 80004d8:	b011      	add	sp, #68	; 0x44
 80004da:	bd90      	pop	{r4, r7, pc}

080004dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004e0:	b672      	cpsid	i
}
 80004e2:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80004e4:	e7fe      	b.n	80004e4 <Error_Handler+0x8>
	...

080004e8 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80004e8:	b580      	push	{r7, lr}
 80004ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_Init 0 */

  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80004ec:	4b1a      	ldr	r3, [pc, #104]	; (8000558 <MX_SPI1_Init+0x70>)
 80004ee:	2220      	movs	r2, #32
 80004f0:	61da      	str	r2, [r3, #28]
  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80004f2:	4b19      	ldr	r3, [pc, #100]	; (8000558 <MX_SPI1_Init+0x70>)
 80004f4:	4a19      	ldr	r2, [pc, #100]	; (800055c <MX_SPI1_Init+0x74>)
 80004f6:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 80004f8:	4b17      	ldr	r3, [pc, #92]	; (8000558 <MX_SPI1_Init+0x70>)
 80004fa:	2200      	movs	r2, #0
 80004fc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80004fe:	4b16      	ldr	r3, [pc, #88]	; (8000558 <MX_SPI1_Init+0x70>)
 8000500:	2200      	movs	r2, #0
 8000502:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000504:	4b14      	ldr	r3, [pc, #80]	; (8000558 <MX_SPI1_Init+0x70>)
 8000506:	22e0      	movs	r2, #224	; 0xe0
 8000508:	00d2      	lsls	r2, r2, #3
 800050a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800050c:	4b12      	ldr	r3, [pc, #72]	; (8000558 <MX_SPI1_Init+0x70>)
 800050e:	2202      	movs	r2, #2
 8000510:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000512:	4b11      	ldr	r3, [pc, #68]	; (8000558 <MX_SPI1_Init+0x70>)
 8000514:	2201      	movs	r2, #1
 8000516:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_INPUT;
 8000518:	4b0f      	ldr	r3, [pc, #60]	; (8000558 <MX_SPI1_Init+0x70>)
 800051a:	2200      	movs	r2, #0
 800051c:	619a      	str	r2, [r3, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800051e:	4b0e      	ldr	r3, [pc, #56]	; (8000558 <MX_SPI1_Init+0x70>)
 8000520:	2200      	movs	r2, #0
 8000522:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000524:	4b0c      	ldr	r3, [pc, #48]	; (8000558 <MX_SPI1_Init+0x70>)
 8000526:	2200      	movs	r2, #0
 8000528:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800052a:	4b0b      	ldr	r3, [pc, #44]	; (8000558 <MX_SPI1_Init+0x70>)
 800052c:	2200      	movs	r2, #0
 800052e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000530:	4b09      	ldr	r3, [pc, #36]	; (8000558 <MX_SPI1_Init+0x70>)
 8000532:	2207      	movs	r2, #7
 8000534:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000536:	4b08      	ldr	r3, [pc, #32]	; (8000558 <MX_SPI1_Init+0x70>)
 8000538:	2200      	movs	r2, #0
 800053a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 800053c:	4b06      	ldr	r3, [pc, #24]	; (8000558 <MX_SPI1_Init+0x70>)
 800053e:	2200      	movs	r2, #0
 8000540:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000542:	4b05      	ldr	r3, [pc, #20]	; (8000558 <MX_SPI1_Init+0x70>)
 8000544:	0018      	movs	r0, r3
 8000546:	f001 f85f 	bl	8001608 <HAL_SPI_Init>
 800054a:	1e03      	subs	r3, r0, #0
 800054c:	d001      	beq.n	8000552 <MX_SPI1_Init+0x6a>
  {
    Error_Handler();
 800054e:	f7ff ffc5 	bl	80004dc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000552:	46c0      	nop			; (mov r8, r8)
 8000554:	46bd      	mov	sp, r7
 8000556:	bd80      	pop	{r7, pc}
 8000558:	20000060 	.word	0x20000060
 800055c:	40013000 	.word	0x40013000

08000560 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000560:	b590      	push	{r4, r7, lr}
 8000562:	b08b      	sub	sp, #44	; 0x2c
 8000564:	af00      	add	r7, sp, #0
 8000566:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000568:	2414      	movs	r4, #20
 800056a:	193b      	adds	r3, r7, r4
 800056c:	0018      	movs	r0, r3
 800056e:	2314      	movs	r3, #20
 8000570:	001a      	movs	r2, r3
 8000572:	2100      	movs	r1, #0
 8000574:	f001 fdca 	bl	800210c <memset>
  if(spiHandle->Instance==SPI1)
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	681b      	ldr	r3, [r3, #0]
 800057c:	4a20      	ldr	r2, [pc, #128]	; (8000600 <HAL_SPI_MspInit+0xa0>)
 800057e:	4293      	cmp	r3, r2
 8000580:	d13a      	bne.n	80005f8 <HAL_SPI_MspInit+0x98>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000582:	4b20      	ldr	r3, [pc, #128]	; (8000604 <HAL_SPI_MspInit+0xa4>)
 8000584:	699a      	ldr	r2, [r3, #24]
 8000586:	4b1f      	ldr	r3, [pc, #124]	; (8000604 <HAL_SPI_MspInit+0xa4>)
 8000588:	2180      	movs	r1, #128	; 0x80
 800058a:	0149      	lsls	r1, r1, #5
 800058c:	430a      	orrs	r2, r1
 800058e:	619a      	str	r2, [r3, #24]
 8000590:	4b1c      	ldr	r3, [pc, #112]	; (8000604 <HAL_SPI_MspInit+0xa4>)
 8000592:	699a      	ldr	r2, [r3, #24]
 8000594:	2380      	movs	r3, #128	; 0x80
 8000596:	015b      	lsls	r3, r3, #5
 8000598:	4013      	ands	r3, r2
 800059a:	613b      	str	r3, [r7, #16]
 800059c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800059e:	4b19      	ldr	r3, [pc, #100]	; (8000604 <HAL_SPI_MspInit+0xa4>)
 80005a0:	695a      	ldr	r2, [r3, #20]
 80005a2:	4b18      	ldr	r3, [pc, #96]	; (8000604 <HAL_SPI_MspInit+0xa4>)
 80005a4:	2180      	movs	r1, #128	; 0x80
 80005a6:	0289      	lsls	r1, r1, #10
 80005a8:	430a      	orrs	r2, r1
 80005aa:	615a      	str	r2, [r3, #20]
 80005ac:	4b15      	ldr	r3, [pc, #84]	; (8000604 <HAL_SPI_MspInit+0xa4>)
 80005ae:	695a      	ldr	r2, [r3, #20]
 80005b0:	2380      	movs	r3, #128	; 0x80
 80005b2:	029b      	lsls	r3, r3, #10
 80005b4:	4013      	ands	r3, r2
 80005b6:	60fb      	str	r3, [r7, #12]
 80005b8:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80005ba:	0021      	movs	r1, r4
 80005bc:	187b      	adds	r3, r7, r1
 80005be:	22f0      	movs	r2, #240	; 0xf0
 80005c0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005c2:	187b      	adds	r3, r7, r1
 80005c4:	2202      	movs	r2, #2
 80005c6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005c8:	187b      	adds	r3, r7, r1
 80005ca:	2200      	movs	r2, #0
 80005cc:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80005ce:	187b      	adds	r3, r7, r1
 80005d0:	2203      	movs	r2, #3
 80005d2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 80005d4:	187b      	adds	r3, r7, r1
 80005d6:	2200      	movs	r2, #0
 80005d8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005da:	187a      	adds	r2, r7, r1
 80005dc:	2390      	movs	r3, #144	; 0x90
 80005de:	05db      	lsls	r3, r3, #23
 80005e0:	0011      	movs	r1, r2
 80005e2:	0018      	movs	r0, r3
 80005e4:	f000 fa34 	bl	8000a50 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 80005e8:	2200      	movs	r2, #0
 80005ea:	2100      	movs	r1, #0
 80005ec:	2019      	movs	r0, #25
 80005ee:	f000 f9b7 	bl	8000960 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80005f2:	2019      	movs	r0, #25
 80005f4:	f000 f9c9 	bl	800098a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80005f8:	46c0      	nop			; (mov r8, r8)
 80005fa:	46bd      	mov	sp, r7
 80005fc:	b00b      	add	sp, #44	; 0x2c
 80005fe:	bd90      	pop	{r4, r7, pc}
 8000600:	40013000 	.word	0x40013000
 8000604:	40021000 	.word	0x40021000

08000608 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b082      	sub	sp, #8
 800060c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800060e:	4b0f      	ldr	r3, [pc, #60]	; (800064c <HAL_MspInit+0x44>)
 8000610:	699a      	ldr	r2, [r3, #24]
 8000612:	4b0e      	ldr	r3, [pc, #56]	; (800064c <HAL_MspInit+0x44>)
 8000614:	2101      	movs	r1, #1
 8000616:	430a      	orrs	r2, r1
 8000618:	619a      	str	r2, [r3, #24]
 800061a:	4b0c      	ldr	r3, [pc, #48]	; (800064c <HAL_MspInit+0x44>)
 800061c:	699b      	ldr	r3, [r3, #24]
 800061e:	2201      	movs	r2, #1
 8000620:	4013      	ands	r3, r2
 8000622:	607b      	str	r3, [r7, #4]
 8000624:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000626:	4b09      	ldr	r3, [pc, #36]	; (800064c <HAL_MspInit+0x44>)
 8000628:	69da      	ldr	r2, [r3, #28]
 800062a:	4b08      	ldr	r3, [pc, #32]	; (800064c <HAL_MspInit+0x44>)
 800062c:	2180      	movs	r1, #128	; 0x80
 800062e:	0549      	lsls	r1, r1, #21
 8000630:	430a      	orrs	r2, r1
 8000632:	61da      	str	r2, [r3, #28]
 8000634:	4b05      	ldr	r3, [pc, #20]	; (800064c <HAL_MspInit+0x44>)
 8000636:	69da      	ldr	r2, [r3, #28]
 8000638:	2380      	movs	r3, #128	; 0x80
 800063a:	055b      	lsls	r3, r3, #21
 800063c:	4013      	ands	r3, r2
 800063e:	603b      	str	r3, [r7, #0]
 8000640:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000642:	46c0      	nop			; (mov r8, r8)
 8000644:	46bd      	mov	sp, r7
 8000646:	b002      	add	sp, #8
 8000648:	bd80      	pop	{r7, pc}
 800064a:	46c0      	nop			; (mov r8, r8)
 800064c:	40021000 	.word	0x40021000

08000650 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000654:	e7fe      	b.n	8000654 <NMI_Handler+0x4>

08000656 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000656:	b580      	push	{r7, lr}
 8000658:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800065a:	e7fe      	b.n	800065a <HardFault_Handler+0x4>

0800065c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000660:	46c0      	nop			; (mov r8, r8)
 8000662:	46bd      	mov	sp, r7
 8000664:	bd80      	pop	{r7, pc}

08000666 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000666:	b580      	push	{r7, lr}
 8000668:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800066a:	46c0      	nop			; (mov r8, r8)
 800066c:	46bd      	mov	sp, r7
 800066e:	bd80      	pop	{r7, pc}

08000670 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000674:	f000 f888 	bl	8000788 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000678:	46c0      	nop			; (mov r8, r8)
 800067a:	46bd      	mov	sp, r7
 800067c:	bd80      	pop	{r7, pc}
	...

08000680 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8000684:	4b03      	ldr	r3, [pc, #12]	; (8000694 <SPI1_IRQHandler+0x14>)
 8000686:	0018      	movs	r0, r3
 8000688:	f001 f940 	bl	800190c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 800068c:	46c0      	nop			; (mov r8, r8)
 800068e:	46bd      	mov	sp, r7
 8000690:	bd80      	pop	{r7, pc}
 8000692:	46c0      	nop			; (mov r8, r8)
 8000694:	20000060 	.word	0x20000060

08000698 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 800069c:	46c0      	nop			; (mov r8, r8)
 800069e:	46bd      	mov	sp, r7
 80006a0:	bd80      	pop	{r7, pc}
	...

080006a4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80006a4:	480d      	ldr	r0, [pc, #52]	; (80006dc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80006a6:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80006a8:	480d      	ldr	r0, [pc, #52]	; (80006e0 <LoopForever+0x6>)
  ldr r1, =_edata
 80006aa:	490e      	ldr	r1, [pc, #56]	; (80006e4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80006ac:	4a0e      	ldr	r2, [pc, #56]	; (80006e8 <LoopForever+0xe>)
  movs r3, #0
 80006ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80006b0:	e002      	b.n	80006b8 <LoopCopyDataInit>

080006b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80006b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80006b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80006b6:	3304      	adds	r3, #4

080006b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80006b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80006ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80006bc:	d3f9      	bcc.n	80006b2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80006be:	4a0b      	ldr	r2, [pc, #44]	; (80006ec <LoopForever+0x12>)
  ldr r4, =_ebss
 80006c0:	4c0b      	ldr	r4, [pc, #44]	; (80006f0 <LoopForever+0x16>)
  movs r3, #0
 80006c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80006c4:	e001      	b.n	80006ca <LoopFillZerobss>

080006c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80006c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80006c8:	3204      	adds	r2, #4

080006ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80006ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80006cc:	d3fb      	bcc.n	80006c6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80006ce:	f7ff ffe3 	bl	8000698 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 80006d2:	f001 fcf7 	bl	80020c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80006d6:	f7ff fe8f 	bl	80003f8 <main>

080006da <LoopForever>:

LoopForever:
    b LoopForever
 80006da:	e7fe      	b.n	80006da <LoopForever>
  ldr   r0, =_estack
 80006dc:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80006e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80006e4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80006e8:	0800216c 	.word	0x0800216c
  ldr r2, =_sbss
 80006ec:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80006f0:	200000c8 	.word	0x200000c8

080006f4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80006f4:	e7fe      	b.n	80006f4 <ADC1_IRQHandler>
	...

080006f8 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80006fc:	4b07      	ldr	r3, [pc, #28]	; (800071c <HAL_Init+0x24>)
 80006fe:	681a      	ldr	r2, [r3, #0]
 8000700:	4b06      	ldr	r3, [pc, #24]	; (800071c <HAL_Init+0x24>)
 8000702:	2110      	movs	r1, #16
 8000704:	430a      	orrs	r2, r1
 8000706:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000708:	2000      	movs	r0, #0
 800070a:	f000 f809 	bl	8000720 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800070e:	f7ff ff7b 	bl	8000608 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000712:	2300      	movs	r3, #0
}
 8000714:	0018      	movs	r0, r3
 8000716:	46bd      	mov	sp, r7
 8000718:	bd80      	pop	{r7, pc}
 800071a:	46c0      	nop			; (mov r8, r8)
 800071c:	40022000 	.word	0x40022000

08000720 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000720:	b590      	push	{r4, r7, lr}
 8000722:	b083      	sub	sp, #12
 8000724:	af00      	add	r7, sp, #0
 8000726:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000728:	4b14      	ldr	r3, [pc, #80]	; (800077c <HAL_InitTick+0x5c>)
 800072a:	681c      	ldr	r4, [r3, #0]
 800072c:	4b14      	ldr	r3, [pc, #80]	; (8000780 <HAL_InitTick+0x60>)
 800072e:	781b      	ldrb	r3, [r3, #0]
 8000730:	0019      	movs	r1, r3
 8000732:	23fa      	movs	r3, #250	; 0xfa
 8000734:	0098      	lsls	r0, r3, #2
 8000736:	f7ff fce5 	bl	8000104 <__udivsi3>
 800073a:	0003      	movs	r3, r0
 800073c:	0019      	movs	r1, r3
 800073e:	0020      	movs	r0, r4
 8000740:	f7ff fce0 	bl	8000104 <__udivsi3>
 8000744:	0003      	movs	r3, r0
 8000746:	0018      	movs	r0, r3
 8000748:	f000 f92f 	bl	80009aa <HAL_SYSTICK_Config>
 800074c:	1e03      	subs	r3, r0, #0
 800074e:	d001      	beq.n	8000754 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000750:	2301      	movs	r3, #1
 8000752:	e00f      	b.n	8000774 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	2b03      	cmp	r3, #3
 8000758:	d80b      	bhi.n	8000772 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800075a:	6879      	ldr	r1, [r7, #4]
 800075c:	2301      	movs	r3, #1
 800075e:	425b      	negs	r3, r3
 8000760:	2200      	movs	r2, #0
 8000762:	0018      	movs	r0, r3
 8000764:	f000 f8fc 	bl	8000960 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000768:	4b06      	ldr	r3, [pc, #24]	; (8000784 <HAL_InitTick+0x64>)
 800076a:	687a      	ldr	r2, [r7, #4]
 800076c:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 800076e:	2300      	movs	r3, #0
 8000770:	e000      	b.n	8000774 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000772:	2301      	movs	r3, #1
}
 8000774:	0018      	movs	r0, r3
 8000776:	46bd      	mov	sp, r7
 8000778:	b003      	add	sp, #12
 800077a:	bd90      	pop	{r4, r7, pc}
 800077c:	20000000 	.word	0x20000000
 8000780:	20000008 	.word	0x20000008
 8000784:	20000004 	.word	0x20000004

08000788 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800078c:	4b05      	ldr	r3, [pc, #20]	; (80007a4 <HAL_IncTick+0x1c>)
 800078e:	781b      	ldrb	r3, [r3, #0]
 8000790:	001a      	movs	r2, r3
 8000792:	4b05      	ldr	r3, [pc, #20]	; (80007a8 <HAL_IncTick+0x20>)
 8000794:	681b      	ldr	r3, [r3, #0]
 8000796:	18d2      	adds	r2, r2, r3
 8000798:	4b03      	ldr	r3, [pc, #12]	; (80007a8 <HAL_IncTick+0x20>)
 800079a:	601a      	str	r2, [r3, #0]
}
 800079c:	46c0      	nop			; (mov r8, r8)
 800079e:	46bd      	mov	sp, r7
 80007a0:	bd80      	pop	{r7, pc}
 80007a2:	46c0      	nop			; (mov r8, r8)
 80007a4:	20000008 	.word	0x20000008
 80007a8:	200000c4 	.word	0x200000c4

080007ac <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	af00      	add	r7, sp, #0
  return uwTick;
 80007b0:	4b02      	ldr	r3, [pc, #8]	; (80007bc <HAL_GetTick+0x10>)
 80007b2:	681b      	ldr	r3, [r3, #0]
}
 80007b4:	0018      	movs	r0, r3
 80007b6:	46bd      	mov	sp, r7
 80007b8:	bd80      	pop	{r7, pc}
 80007ba:	46c0      	nop			; (mov r8, r8)
 80007bc:	200000c4 	.word	0x200000c4

080007c0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b084      	sub	sp, #16
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80007c8:	f7ff fff0 	bl	80007ac <HAL_GetTick>
 80007cc:	0003      	movs	r3, r0
 80007ce:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80007d4:	68fb      	ldr	r3, [r7, #12]
 80007d6:	3301      	adds	r3, #1
 80007d8:	d005      	beq.n	80007e6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80007da:	4b0a      	ldr	r3, [pc, #40]	; (8000804 <HAL_Delay+0x44>)
 80007dc:	781b      	ldrb	r3, [r3, #0]
 80007de:	001a      	movs	r2, r3
 80007e0:	68fb      	ldr	r3, [r7, #12]
 80007e2:	189b      	adds	r3, r3, r2
 80007e4:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80007e6:	46c0      	nop			; (mov r8, r8)
 80007e8:	f7ff ffe0 	bl	80007ac <HAL_GetTick>
 80007ec:	0002      	movs	r2, r0
 80007ee:	68bb      	ldr	r3, [r7, #8]
 80007f0:	1ad3      	subs	r3, r2, r3
 80007f2:	68fa      	ldr	r2, [r7, #12]
 80007f4:	429a      	cmp	r2, r3
 80007f6:	d8f7      	bhi.n	80007e8 <HAL_Delay+0x28>
  {
  }
}
 80007f8:	46c0      	nop			; (mov r8, r8)
 80007fa:	46c0      	nop			; (mov r8, r8)
 80007fc:	46bd      	mov	sp, r7
 80007fe:	b004      	add	sp, #16
 8000800:	bd80      	pop	{r7, pc}
 8000802:	46c0      	nop			; (mov r8, r8)
 8000804:	20000008 	.word	0x20000008

08000808 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b082      	sub	sp, #8
 800080c:	af00      	add	r7, sp, #0
 800080e:	0002      	movs	r2, r0
 8000810:	1dfb      	adds	r3, r7, #7
 8000812:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000814:	1dfb      	adds	r3, r7, #7
 8000816:	781b      	ldrb	r3, [r3, #0]
 8000818:	2b7f      	cmp	r3, #127	; 0x7f
 800081a:	d809      	bhi.n	8000830 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800081c:	1dfb      	adds	r3, r7, #7
 800081e:	781b      	ldrb	r3, [r3, #0]
 8000820:	001a      	movs	r2, r3
 8000822:	231f      	movs	r3, #31
 8000824:	401a      	ands	r2, r3
 8000826:	4b04      	ldr	r3, [pc, #16]	; (8000838 <__NVIC_EnableIRQ+0x30>)
 8000828:	2101      	movs	r1, #1
 800082a:	4091      	lsls	r1, r2
 800082c:	000a      	movs	r2, r1
 800082e:	601a      	str	r2, [r3, #0]
  }
}
 8000830:	46c0      	nop			; (mov r8, r8)
 8000832:	46bd      	mov	sp, r7
 8000834:	b002      	add	sp, #8
 8000836:	bd80      	pop	{r7, pc}
 8000838:	e000e100 	.word	0xe000e100

0800083c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800083c:	b590      	push	{r4, r7, lr}
 800083e:	b083      	sub	sp, #12
 8000840:	af00      	add	r7, sp, #0
 8000842:	0002      	movs	r2, r0
 8000844:	6039      	str	r1, [r7, #0]
 8000846:	1dfb      	adds	r3, r7, #7
 8000848:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800084a:	1dfb      	adds	r3, r7, #7
 800084c:	781b      	ldrb	r3, [r3, #0]
 800084e:	2b7f      	cmp	r3, #127	; 0x7f
 8000850:	d828      	bhi.n	80008a4 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000852:	4a2f      	ldr	r2, [pc, #188]	; (8000910 <__NVIC_SetPriority+0xd4>)
 8000854:	1dfb      	adds	r3, r7, #7
 8000856:	781b      	ldrb	r3, [r3, #0]
 8000858:	b25b      	sxtb	r3, r3
 800085a:	089b      	lsrs	r3, r3, #2
 800085c:	33c0      	adds	r3, #192	; 0xc0
 800085e:	009b      	lsls	r3, r3, #2
 8000860:	589b      	ldr	r3, [r3, r2]
 8000862:	1dfa      	adds	r2, r7, #7
 8000864:	7812      	ldrb	r2, [r2, #0]
 8000866:	0011      	movs	r1, r2
 8000868:	2203      	movs	r2, #3
 800086a:	400a      	ands	r2, r1
 800086c:	00d2      	lsls	r2, r2, #3
 800086e:	21ff      	movs	r1, #255	; 0xff
 8000870:	4091      	lsls	r1, r2
 8000872:	000a      	movs	r2, r1
 8000874:	43d2      	mvns	r2, r2
 8000876:	401a      	ands	r2, r3
 8000878:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800087a:	683b      	ldr	r3, [r7, #0]
 800087c:	019b      	lsls	r3, r3, #6
 800087e:	22ff      	movs	r2, #255	; 0xff
 8000880:	401a      	ands	r2, r3
 8000882:	1dfb      	adds	r3, r7, #7
 8000884:	781b      	ldrb	r3, [r3, #0]
 8000886:	0018      	movs	r0, r3
 8000888:	2303      	movs	r3, #3
 800088a:	4003      	ands	r3, r0
 800088c:	00db      	lsls	r3, r3, #3
 800088e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000890:	481f      	ldr	r0, [pc, #124]	; (8000910 <__NVIC_SetPriority+0xd4>)
 8000892:	1dfb      	adds	r3, r7, #7
 8000894:	781b      	ldrb	r3, [r3, #0]
 8000896:	b25b      	sxtb	r3, r3
 8000898:	089b      	lsrs	r3, r3, #2
 800089a:	430a      	orrs	r2, r1
 800089c:	33c0      	adds	r3, #192	; 0xc0
 800089e:	009b      	lsls	r3, r3, #2
 80008a0:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80008a2:	e031      	b.n	8000908 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80008a4:	4a1b      	ldr	r2, [pc, #108]	; (8000914 <__NVIC_SetPriority+0xd8>)
 80008a6:	1dfb      	adds	r3, r7, #7
 80008a8:	781b      	ldrb	r3, [r3, #0]
 80008aa:	0019      	movs	r1, r3
 80008ac:	230f      	movs	r3, #15
 80008ae:	400b      	ands	r3, r1
 80008b0:	3b08      	subs	r3, #8
 80008b2:	089b      	lsrs	r3, r3, #2
 80008b4:	3306      	adds	r3, #6
 80008b6:	009b      	lsls	r3, r3, #2
 80008b8:	18d3      	adds	r3, r2, r3
 80008ba:	3304      	adds	r3, #4
 80008bc:	681b      	ldr	r3, [r3, #0]
 80008be:	1dfa      	adds	r2, r7, #7
 80008c0:	7812      	ldrb	r2, [r2, #0]
 80008c2:	0011      	movs	r1, r2
 80008c4:	2203      	movs	r2, #3
 80008c6:	400a      	ands	r2, r1
 80008c8:	00d2      	lsls	r2, r2, #3
 80008ca:	21ff      	movs	r1, #255	; 0xff
 80008cc:	4091      	lsls	r1, r2
 80008ce:	000a      	movs	r2, r1
 80008d0:	43d2      	mvns	r2, r2
 80008d2:	401a      	ands	r2, r3
 80008d4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80008d6:	683b      	ldr	r3, [r7, #0]
 80008d8:	019b      	lsls	r3, r3, #6
 80008da:	22ff      	movs	r2, #255	; 0xff
 80008dc:	401a      	ands	r2, r3
 80008de:	1dfb      	adds	r3, r7, #7
 80008e0:	781b      	ldrb	r3, [r3, #0]
 80008e2:	0018      	movs	r0, r3
 80008e4:	2303      	movs	r3, #3
 80008e6:	4003      	ands	r3, r0
 80008e8:	00db      	lsls	r3, r3, #3
 80008ea:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80008ec:	4809      	ldr	r0, [pc, #36]	; (8000914 <__NVIC_SetPriority+0xd8>)
 80008ee:	1dfb      	adds	r3, r7, #7
 80008f0:	781b      	ldrb	r3, [r3, #0]
 80008f2:	001c      	movs	r4, r3
 80008f4:	230f      	movs	r3, #15
 80008f6:	4023      	ands	r3, r4
 80008f8:	3b08      	subs	r3, #8
 80008fa:	089b      	lsrs	r3, r3, #2
 80008fc:	430a      	orrs	r2, r1
 80008fe:	3306      	adds	r3, #6
 8000900:	009b      	lsls	r3, r3, #2
 8000902:	18c3      	adds	r3, r0, r3
 8000904:	3304      	adds	r3, #4
 8000906:	601a      	str	r2, [r3, #0]
}
 8000908:	46c0      	nop			; (mov r8, r8)
 800090a:	46bd      	mov	sp, r7
 800090c:	b003      	add	sp, #12
 800090e:	bd90      	pop	{r4, r7, pc}
 8000910:	e000e100 	.word	0xe000e100
 8000914:	e000ed00 	.word	0xe000ed00

08000918 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b082      	sub	sp, #8
 800091c:	af00      	add	r7, sp, #0
 800091e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	1e5a      	subs	r2, r3, #1
 8000924:	2380      	movs	r3, #128	; 0x80
 8000926:	045b      	lsls	r3, r3, #17
 8000928:	429a      	cmp	r2, r3
 800092a:	d301      	bcc.n	8000930 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 800092c:	2301      	movs	r3, #1
 800092e:	e010      	b.n	8000952 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000930:	4b0a      	ldr	r3, [pc, #40]	; (800095c <SysTick_Config+0x44>)
 8000932:	687a      	ldr	r2, [r7, #4]
 8000934:	3a01      	subs	r2, #1
 8000936:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000938:	2301      	movs	r3, #1
 800093a:	425b      	negs	r3, r3
 800093c:	2103      	movs	r1, #3
 800093e:	0018      	movs	r0, r3
 8000940:	f7ff ff7c 	bl	800083c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000944:	4b05      	ldr	r3, [pc, #20]	; (800095c <SysTick_Config+0x44>)
 8000946:	2200      	movs	r2, #0
 8000948:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800094a:	4b04      	ldr	r3, [pc, #16]	; (800095c <SysTick_Config+0x44>)
 800094c:	2207      	movs	r2, #7
 800094e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000950:	2300      	movs	r3, #0
}
 8000952:	0018      	movs	r0, r3
 8000954:	46bd      	mov	sp, r7
 8000956:	b002      	add	sp, #8
 8000958:	bd80      	pop	{r7, pc}
 800095a:	46c0      	nop			; (mov r8, r8)
 800095c:	e000e010 	.word	0xe000e010

08000960 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000960:	b580      	push	{r7, lr}
 8000962:	b084      	sub	sp, #16
 8000964:	af00      	add	r7, sp, #0
 8000966:	60b9      	str	r1, [r7, #8]
 8000968:	607a      	str	r2, [r7, #4]
 800096a:	210f      	movs	r1, #15
 800096c:	187b      	adds	r3, r7, r1
 800096e:	1c02      	adds	r2, r0, #0
 8000970:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000972:	68ba      	ldr	r2, [r7, #8]
 8000974:	187b      	adds	r3, r7, r1
 8000976:	781b      	ldrb	r3, [r3, #0]
 8000978:	b25b      	sxtb	r3, r3
 800097a:	0011      	movs	r1, r2
 800097c:	0018      	movs	r0, r3
 800097e:	f7ff ff5d 	bl	800083c <__NVIC_SetPriority>
}
 8000982:	46c0      	nop			; (mov r8, r8)
 8000984:	46bd      	mov	sp, r7
 8000986:	b004      	add	sp, #16
 8000988:	bd80      	pop	{r7, pc}

0800098a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800098a:	b580      	push	{r7, lr}
 800098c:	b082      	sub	sp, #8
 800098e:	af00      	add	r7, sp, #0
 8000990:	0002      	movs	r2, r0
 8000992:	1dfb      	adds	r3, r7, #7
 8000994:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000996:	1dfb      	adds	r3, r7, #7
 8000998:	781b      	ldrb	r3, [r3, #0]
 800099a:	b25b      	sxtb	r3, r3
 800099c:	0018      	movs	r0, r3
 800099e:	f7ff ff33 	bl	8000808 <__NVIC_EnableIRQ>
}
 80009a2:	46c0      	nop			; (mov r8, r8)
 80009a4:	46bd      	mov	sp, r7
 80009a6:	b002      	add	sp, #8
 80009a8:	bd80      	pop	{r7, pc}

080009aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80009aa:	b580      	push	{r7, lr}
 80009ac:	b082      	sub	sp, #8
 80009ae:	af00      	add	r7, sp, #0
 80009b0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	0018      	movs	r0, r3
 80009b6:	f7ff ffaf 	bl	8000918 <SysTick_Config>
 80009ba:	0003      	movs	r3, r0
}
 80009bc:	0018      	movs	r0, r3
 80009be:	46bd      	mov	sp, r7
 80009c0:	b002      	add	sp, #8
 80009c2:	bd80      	pop	{r7, pc}

080009c4 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b084      	sub	sp, #16
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80009cc:	210f      	movs	r1, #15
 80009ce:	187b      	adds	r3, r7, r1
 80009d0:	2200      	movs	r2, #0
 80009d2:	701a      	strb	r2, [r3, #0]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	2221      	movs	r2, #33	; 0x21
 80009d8:	5c9b      	ldrb	r3, [r3, r2]
 80009da:	b2db      	uxtb	r3, r3
 80009dc:	2b02      	cmp	r3, #2
 80009de:	d006      	beq.n	80009ee <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	2204      	movs	r2, #4
 80009e4:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80009e6:	187b      	adds	r3, r7, r1
 80009e8:	2201      	movs	r2, #1
 80009ea:	701a      	strb	r2, [r3, #0]
 80009ec:	e028      	b.n	8000a40 <HAL_DMA_Abort_IT+0x7c>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	681b      	ldr	r3, [r3, #0]
 80009f2:	681a      	ldr	r2, [r3, #0]
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	210e      	movs	r1, #14
 80009fa:	438a      	bics	r2, r1
 80009fc:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	681b      	ldr	r3, [r3, #0]
 8000a02:	681a      	ldr	r2, [r3, #0]
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	2101      	movs	r1, #1
 8000a0a:	438a      	bics	r2, r1
 8000a0c:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000a16:	2101      	movs	r1, #1
 8000a18:	4091      	lsls	r1, r2
 8000a1a:	000a      	movs	r2, r1
 8000a1c:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	2221      	movs	r2, #33	; 0x21
 8000a22:	2101      	movs	r1, #1
 8000a24:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	2220      	movs	r2, #32
 8000a2a:	2100      	movs	r1, #0
 8000a2c:	5499      	strb	r1, [r3, r2]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d004      	beq.n	8000a40 <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000a3a:	687a      	ldr	r2, [r7, #4]
 8000a3c:	0010      	movs	r0, r2
 8000a3e:	4798      	blx	r3
    } 
  }
  return status;
 8000a40:	230f      	movs	r3, #15
 8000a42:	18fb      	adds	r3, r7, r3
 8000a44:	781b      	ldrb	r3, [r3, #0]
}
 8000a46:	0018      	movs	r0, r3
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	b004      	add	sp, #16
 8000a4c:	bd80      	pop	{r7, pc}
	...

08000a50 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b086      	sub	sp, #24
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	6078      	str	r0, [r7, #4]
 8000a58:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a5e:	e14f      	b.n	8000d00 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000a60:	683b      	ldr	r3, [r7, #0]
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	2101      	movs	r1, #1
 8000a66:	697a      	ldr	r2, [r7, #20]
 8000a68:	4091      	lsls	r1, r2
 8000a6a:	000a      	movs	r2, r1
 8000a6c:	4013      	ands	r3, r2
 8000a6e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000a70:	68fb      	ldr	r3, [r7, #12]
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d100      	bne.n	8000a78 <HAL_GPIO_Init+0x28>
 8000a76:	e140      	b.n	8000cfa <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000a78:	683b      	ldr	r3, [r7, #0]
 8000a7a:	685b      	ldr	r3, [r3, #4]
 8000a7c:	2b01      	cmp	r3, #1
 8000a7e:	d00b      	beq.n	8000a98 <HAL_GPIO_Init+0x48>
 8000a80:	683b      	ldr	r3, [r7, #0]
 8000a82:	685b      	ldr	r3, [r3, #4]
 8000a84:	2b02      	cmp	r3, #2
 8000a86:	d007      	beq.n	8000a98 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000a88:	683b      	ldr	r3, [r7, #0]
 8000a8a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000a8c:	2b11      	cmp	r3, #17
 8000a8e:	d003      	beq.n	8000a98 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000a90:	683b      	ldr	r3, [r7, #0]
 8000a92:	685b      	ldr	r3, [r3, #4]
 8000a94:	2b12      	cmp	r3, #18
 8000a96:	d130      	bne.n	8000afa <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	689b      	ldr	r3, [r3, #8]
 8000a9c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000a9e:	697b      	ldr	r3, [r7, #20]
 8000aa0:	005b      	lsls	r3, r3, #1
 8000aa2:	2203      	movs	r2, #3
 8000aa4:	409a      	lsls	r2, r3
 8000aa6:	0013      	movs	r3, r2
 8000aa8:	43da      	mvns	r2, r3
 8000aaa:	693b      	ldr	r3, [r7, #16]
 8000aac:	4013      	ands	r3, r2
 8000aae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000ab0:	683b      	ldr	r3, [r7, #0]
 8000ab2:	68da      	ldr	r2, [r3, #12]
 8000ab4:	697b      	ldr	r3, [r7, #20]
 8000ab6:	005b      	lsls	r3, r3, #1
 8000ab8:	409a      	lsls	r2, r3
 8000aba:	0013      	movs	r3, r2
 8000abc:	693a      	ldr	r2, [r7, #16]
 8000abe:	4313      	orrs	r3, r2
 8000ac0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	693a      	ldr	r2, [r7, #16]
 8000ac6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	685b      	ldr	r3, [r3, #4]
 8000acc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000ace:	2201      	movs	r2, #1
 8000ad0:	697b      	ldr	r3, [r7, #20]
 8000ad2:	409a      	lsls	r2, r3
 8000ad4:	0013      	movs	r3, r2
 8000ad6:	43da      	mvns	r2, r3
 8000ad8:	693b      	ldr	r3, [r7, #16]
 8000ada:	4013      	ands	r3, r2
 8000adc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000ade:	683b      	ldr	r3, [r7, #0]
 8000ae0:	685b      	ldr	r3, [r3, #4]
 8000ae2:	091b      	lsrs	r3, r3, #4
 8000ae4:	2201      	movs	r2, #1
 8000ae6:	401a      	ands	r2, r3
 8000ae8:	697b      	ldr	r3, [r7, #20]
 8000aea:	409a      	lsls	r2, r3
 8000aec:	0013      	movs	r3, r2
 8000aee:	693a      	ldr	r2, [r7, #16]
 8000af0:	4313      	orrs	r3, r2
 8000af2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	693a      	ldr	r2, [r7, #16]
 8000af8:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	68db      	ldr	r3, [r3, #12]
 8000afe:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000b00:	697b      	ldr	r3, [r7, #20]
 8000b02:	005b      	lsls	r3, r3, #1
 8000b04:	2203      	movs	r2, #3
 8000b06:	409a      	lsls	r2, r3
 8000b08:	0013      	movs	r3, r2
 8000b0a:	43da      	mvns	r2, r3
 8000b0c:	693b      	ldr	r3, [r7, #16]
 8000b0e:	4013      	ands	r3, r2
 8000b10:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000b12:	683b      	ldr	r3, [r7, #0]
 8000b14:	689a      	ldr	r2, [r3, #8]
 8000b16:	697b      	ldr	r3, [r7, #20]
 8000b18:	005b      	lsls	r3, r3, #1
 8000b1a:	409a      	lsls	r2, r3
 8000b1c:	0013      	movs	r3, r2
 8000b1e:	693a      	ldr	r2, [r7, #16]
 8000b20:	4313      	orrs	r3, r2
 8000b22:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	693a      	ldr	r2, [r7, #16]
 8000b28:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000b2a:	683b      	ldr	r3, [r7, #0]
 8000b2c:	685b      	ldr	r3, [r3, #4]
 8000b2e:	2b02      	cmp	r3, #2
 8000b30:	d003      	beq.n	8000b3a <HAL_GPIO_Init+0xea>
 8000b32:	683b      	ldr	r3, [r7, #0]
 8000b34:	685b      	ldr	r3, [r3, #4]
 8000b36:	2b12      	cmp	r3, #18
 8000b38:	d123      	bne.n	8000b82 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000b3a:	697b      	ldr	r3, [r7, #20]
 8000b3c:	08da      	lsrs	r2, r3, #3
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	3208      	adds	r2, #8
 8000b42:	0092      	lsls	r2, r2, #2
 8000b44:	58d3      	ldr	r3, [r2, r3]
 8000b46:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000b48:	697b      	ldr	r3, [r7, #20]
 8000b4a:	2207      	movs	r2, #7
 8000b4c:	4013      	ands	r3, r2
 8000b4e:	009b      	lsls	r3, r3, #2
 8000b50:	220f      	movs	r2, #15
 8000b52:	409a      	lsls	r2, r3
 8000b54:	0013      	movs	r3, r2
 8000b56:	43da      	mvns	r2, r3
 8000b58:	693b      	ldr	r3, [r7, #16]
 8000b5a:	4013      	ands	r3, r2
 8000b5c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000b5e:	683b      	ldr	r3, [r7, #0]
 8000b60:	691a      	ldr	r2, [r3, #16]
 8000b62:	697b      	ldr	r3, [r7, #20]
 8000b64:	2107      	movs	r1, #7
 8000b66:	400b      	ands	r3, r1
 8000b68:	009b      	lsls	r3, r3, #2
 8000b6a:	409a      	lsls	r2, r3
 8000b6c:	0013      	movs	r3, r2
 8000b6e:	693a      	ldr	r2, [r7, #16]
 8000b70:	4313      	orrs	r3, r2
 8000b72:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000b74:	697b      	ldr	r3, [r7, #20]
 8000b76:	08da      	lsrs	r2, r3, #3
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	3208      	adds	r2, #8
 8000b7c:	0092      	lsls	r2, r2, #2
 8000b7e:	6939      	ldr	r1, [r7, #16]
 8000b80:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000b88:	697b      	ldr	r3, [r7, #20]
 8000b8a:	005b      	lsls	r3, r3, #1
 8000b8c:	2203      	movs	r2, #3
 8000b8e:	409a      	lsls	r2, r3
 8000b90:	0013      	movs	r3, r2
 8000b92:	43da      	mvns	r2, r3
 8000b94:	693b      	ldr	r3, [r7, #16]
 8000b96:	4013      	ands	r3, r2
 8000b98:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000b9a:	683b      	ldr	r3, [r7, #0]
 8000b9c:	685b      	ldr	r3, [r3, #4]
 8000b9e:	2203      	movs	r2, #3
 8000ba0:	401a      	ands	r2, r3
 8000ba2:	697b      	ldr	r3, [r7, #20]
 8000ba4:	005b      	lsls	r3, r3, #1
 8000ba6:	409a      	lsls	r2, r3
 8000ba8:	0013      	movs	r3, r2
 8000baa:	693a      	ldr	r2, [r7, #16]
 8000bac:	4313      	orrs	r3, r2
 8000bae:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	693a      	ldr	r2, [r7, #16]
 8000bb4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000bb6:	683b      	ldr	r3, [r7, #0]
 8000bb8:	685a      	ldr	r2, [r3, #4]
 8000bba:	2380      	movs	r3, #128	; 0x80
 8000bbc:	055b      	lsls	r3, r3, #21
 8000bbe:	4013      	ands	r3, r2
 8000bc0:	d100      	bne.n	8000bc4 <HAL_GPIO_Init+0x174>
 8000bc2:	e09a      	b.n	8000cfa <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bc4:	4b54      	ldr	r3, [pc, #336]	; (8000d18 <HAL_GPIO_Init+0x2c8>)
 8000bc6:	699a      	ldr	r2, [r3, #24]
 8000bc8:	4b53      	ldr	r3, [pc, #332]	; (8000d18 <HAL_GPIO_Init+0x2c8>)
 8000bca:	2101      	movs	r1, #1
 8000bcc:	430a      	orrs	r2, r1
 8000bce:	619a      	str	r2, [r3, #24]
 8000bd0:	4b51      	ldr	r3, [pc, #324]	; (8000d18 <HAL_GPIO_Init+0x2c8>)
 8000bd2:	699b      	ldr	r3, [r3, #24]
 8000bd4:	2201      	movs	r2, #1
 8000bd6:	4013      	ands	r3, r2
 8000bd8:	60bb      	str	r3, [r7, #8]
 8000bda:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000bdc:	4a4f      	ldr	r2, [pc, #316]	; (8000d1c <HAL_GPIO_Init+0x2cc>)
 8000bde:	697b      	ldr	r3, [r7, #20]
 8000be0:	089b      	lsrs	r3, r3, #2
 8000be2:	3302      	adds	r3, #2
 8000be4:	009b      	lsls	r3, r3, #2
 8000be6:	589b      	ldr	r3, [r3, r2]
 8000be8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000bea:	697b      	ldr	r3, [r7, #20]
 8000bec:	2203      	movs	r2, #3
 8000bee:	4013      	ands	r3, r2
 8000bf0:	009b      	lsls	r3, r3, #2
 8000bf2:	220f      	movs	r2, #15
 8000bf4:	409a      	lsls	r2, r3
 8000bf6:	0013      	movs	r3, r2
 8000bf8:	43da      	mvns	r2, r3
 8000bfa:	693b      	ldr	r3, [r7, #16]
 8000bfc:	4013      	ands	r3, r2
 8000bfe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000c00:	687a      	ldr	r2, [r7, #4]
 8000c02:	2390      	movs	r3, #144	; 0x90
 8000c04:	05db      	lsls	r3, r3, #23
 8000c06:	429a      	cmp	r2, r3
 8000c08:	d013      	beq.n	8000c32 <HAL_GPIO_Init+0x1e2>
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	4a44      	ldr	r2, [pc, #272]	; (8000d20 <HAL_GPIO_Init+0x2d0>)
 8000c0e:	4293      	cmp	r3, r2
 8000c10:	d00d      	beq.n	8000c2e <HAL_GPIO_Init+0x1de>
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	4a43      	ldr	r2, [pc, #268]	; (8000d24 <HAL_GPIO_Init+0x2d4>)
 8000c16:	4293      	cmp	r3, r2
 8000c18:	d007      	beq.n	8000c2a <HAL_GPIO_Init+0x1da>
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	4a42      	ldr	r2, [pc, #264]	; (8000d28 <HAL_GPIO_Init+0x2d8>)
 8000c1e:	4293      	cmp	r3, r2
 8000c20:	d101      	bne.n	8000c26 <HAL_GPIO_Init+0x1d6>
 8000c22:	2303      	movs	r3, #3
 8000c24:	e006      	b.n	8000c34 <HAL_GPIO_Init+0x1e4>
 8000c26:	2305      	movs	r3, #5
 8000c28:	e004      	b.n	8000c34 <HAL_GPIO_Init+0x1e4>
 8000c2a:	2302      	movs	r3, #2
 8000c2c:	e002      	b.n	8000c34 <HAL_GPIO_Init+0x1e4>
 8000c2e:	2301      	movs	r3, #1
 8000c30:	e000      	b.n	8000c34 <HAL_GPIO_Init+0x1e4>
 8000c32:	2300      	movs	r3, #0
 8000c34:	697a      	ldr	r2, [r7, #20]
 8000c36:	2103      	movs	r1, #3
 8000c38:	400a      	ands	r2, r1
 8000c3a:	0092      	lsls	r2, r2, #2
 8000c3c:	4093      	lsls	r3, r2
 8000c3e:	693a      	ldr	r2, [r7, #16]
 8000c40:	4313      	orrs	r3, r2
 8000c42:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000c44:	4935      	ldr	r1, [pc, #212]	; (8000d1c <HAL_GPIO_Init+0x2cc>)
 8000c46:	697b      	ldr	r3, [r7, #20]
 8000c48:	089b      	lsrs	r3, r3, #2
 8000c4a:	3302      	adds	r3, #2
 8000c4c:	009b      	lsls	r3, r3, #2
 8000c4e:	693a      	ldr	r2, [r7, #16]
 8000c50:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000c52:	4b36      	ldr	r3, [pc, #216]	; (8000d2c <HAL_GPIO_Init+0x2dc>)
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c58:	68fb      	ldr	r3, [r7, #12]
 8000c5a:	43da      	mvns	r2, r3
 8000c5c:	693b      	ldr	r3, [r7, #16]
 8000c5e:	4013      	ands	r3, r2
 8000c60:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000c62:	683b      	ldr	r3, [r7, #0]
 8000c64:	685a      	ldr	r2, [r3, #4]
 8000c66:	2380      	movs	r3, #128	; 0x80
 8000c68:	025b      	lsls	r3, r3, #9
 8000c6a:	4013      	ands	r3, r2
 8000c6c:	d003      	beq.n	8000c76 <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8000c6e:	693a      	ldr	r2, [r7, #16]
 8000c70:	68fb      	ldr	r3, [r7, #12]
 8000c72:	4313      	orrs	r3, r2
 8000c74:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000c76:	4b2d      	ldr	r3, [pc, #180]	; (8000d2c <HAL_GPIO_Init+0x2dc>)
 8000c78:	693a      	ldr	r2, [r7, #16]
 8000c7a:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8000c7c:	4b2b      	ldr	r3, [pc, #172]	; (8000d2c <HAL_GPIO_Init+0x2dc>)
 8000c7e:	685b      	ldr	r3, [r3, #4]
 8000c80:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c82:	68fb      	ldr	r3, [r7, #12]
 8000c84:	43da      	mvns	r2, r3
 8000c86:	693b      	ldr	r3, [r7, #16]
 8000c88:	4013      	ands	r3, r2
 8000c8a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000c8c:	683b      	ldr	r3, [r7, #0]
 8000c8e:	685a      	ldr	r2, [r3, #4]
 8000c90:	2380      	movs	r3, #128	; 0x80
 8000c92:	029b      	lsls	r3, r3, #10
 8000c94:	4013      	ands	r3, r2
 8000c96:	d003      	beq.n	8000ca0 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8000c98:	693a      	ldr	r2, [r7, #16]
 8000c9a:	68fb      	ldr	r3, [r7, #12]
 8000c9c:	4313      	orrs	r3, r2
 8000c9e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000ca0:	4b22      	ldr	r3, [pc, #136]	; (8000d2c <HAL_GPIO_Init+0x2dc>)
 8000ca2:	693a      	ldr	r2, [r7, #16]
 8000ca4:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000ca6:	4b21      	ldr	r3, [pc, #132]	; (8000d2c <HAL_GPIO_Init+0x2dc>)
 8000ca8:	689b      	ldr	r3, [r3, #8]
 8000caa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000cac:	68fb      	ldr	r3, [r7, #12]
 8000cae:	43da      	mvns	r2, r3
 8000cb0:	693b      	ldr	r3, [r7, #16]
 8000cb2:	4013      	ands	r3, r2
 8000cb4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000cb6:	683b      	ldr	r3, [r7, #0]
 8000cb8:	685a      	ldr	r2, [r3, #4]
 8000cba:	2380      	movs	r3, #128	; 0x80
 8000cbc:	035b      	lsls	r3, r3, #13
 8000cbe:	4013      	ands	r3, r2
 8000cc0:	d003      	beq.n	8000cca <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8000cc2:	693a      	ldr	r2, [r7, #16]
 8000cc4:	68fb      	ldr	r3, [r7, #12]
 8000cc6:	4313      	orrs	r3, r2
 8000cc8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000cca:	4b18      	ldr	r3, [pc, #96]	; (8000d2c <HAL_GPIO_Init+0x2dc>)
 8000ccc:	693a      	ldr	r2, [r7, #16]
 8000cce:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000cd0:	4b16      	ldr	r3, [pc, #88]	; (8000d2c <HAL_GPIO_Init+0x2dc>)
 8000cd2:	68db      	ldr	r3, [r3, #12]
 8000cd4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000cd6:	68fb      	ldr	r3, [r7, #12]
 8000cd8:	43da      	mvns	r2, r3
 8000cda:	693b      	ldr	r3, [r7, #16]
 8000cdc:	4013      	ands	r3, r2
 8000cde:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000ce0:	683b      	ldr	r3, [r7, #0]
 8000ce2:	685a      	ldr	r2, [r3, #4]
 8000ce4:	2380      	movs	r3, #128	; 0x80
 8000ce6:	039b      	lsls	r3, r3, #14
 8000ce8:	4013      	ands	r3, r2
 8000cea:	d003      	beq.n	8000cf4 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8000cec:	693a      	ldr	r2, [r7, #16]
 8000cee:	68fb      	ldr	r3, [r7, #12]
 8000cf0:	4313      	orrs	r3, r2
 8000cf2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000cf4:	4b0d      	ldr	r3, [pc, #52]	; (8000d2c <HAL_GPIO_Init+0x2dc>)
 8000cf6:	693a      	ldr	r2, [r7, #16]
 8000cf8:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8000cfa:	697b      	ldr	r3, [r7, #20]
 8000cfc:	3301      	adds	r3, #1
 8000cfe:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d00:	683b      	ldr	r3, [r7, #0]
 8000d02:	681a      	ldr	r2, [r3, #0]
 8000d04:	697b      	ldr	r3, [r7, #20]
 8000d06:	40da      	lsrs	r2, r3
 8000d08:	1e13      	subs	r3, r2, #0
 8000d0a:	d000      	beq.n	8000d0e <HAL_GPIO_Init+0x2be>
 8000d0c:	e6a8      	b.n	8000a60 <HAL_GPIO_Init+0x10>
  } 
}
 8000d0e:	46c0      	nop			; (mov r8, r8)
 8000d10:	46c0      	nop			; (mov r8, r8)
 8000d12:	46bd      	mov	sp, r7
 8000d14:	b006      	add	sp, #24
 8000d16:	bd80      	pop	{r7, pc}
 8000d18:	40021000 	.word	0x40021000
 8000d1c:	40010000 	.word	0x40010000
 8000d20:	48000400 	.word	0x48000400
 8000d24:	48000800 	.word	0x48000800
 8000d28:	48000c00 	.word	0x48000c00
 8000d2c:	40010400 	.word	0x40010400

08000d30 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b082      	sub	sp, #8
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
 8000d38:	0008      	movs	r0, r1
 8000d3a:	0011      	movs	r1, r2
 8000d3c:	1cbb      	adds	r3, r7, #2
 8000d3e:	1c02      	adds	r2, r0, #0
 8000d40:	801a      	strh	r2, [r3, #0]
 8000d42:	1c7b      	adds	r3, r7, #1
 8000d44:	1c0a      	adds	r2, r1, #0
 8000d46:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000d48:	1c7b      	adds	r3, r7, #1
 8000d4a:	781b      	ldrb	r3, [r3, #0]
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d004      	beq.n	8000d5a <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000d50:	1cbb      	adds	r3, r7, #2
 8000d52:	881a      	ldrh	r2, [r3, #0]
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000d58:	e003      	b.n	8000d62 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000d5a:	1cbb      	adds	r3, r7, #2
 8000d5c:	881a      	ldrh	r2, [r3, #0]
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000d62:	46c0      	nop			; (mov r8, r8)
 8000d64:	46bd      	mov	sp, r7
 8000d66:	b002      	add	sp, #8
 8000d68:	bd80      	pop	{r7, pc}
	...

08000d6c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b088      	sub	sp, #32
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d101      	bne.n	8000d7e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000d7a:	2301      	movs	r3, #1
 8000d7c:	e305      	b.n	800138a <HAL_RCC_OscConfig+0x61e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	2201      	movs	r2, #1
 8000d84:	4013      	ands	r3, r2
 8000d86:	d100      	bne.n	8000d8a <HAL_RCC_OscConfig+0x1e>
 8000d88:	e08d      	b.n	8000ea6 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000d8a:	4bc5      	ldr	r3, [pc, #788]	; (80010a0 <HAL_RCC_OscConfig+0x334>)
 8000d8c:	685b      	ldr	r3, [r3, #4]
 8000d8e:	220c      	movs	r2, #12
 8000d90:	4013      	ands	r3, r2
 8000d92:	2b04      	cmp	r3, #4
 8000d94:	d00e      	beq.n	8000db4 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000d96:	4bc2      	ldr	r3, [pc, #776]	; (80010a0 <HAL_RCC_OscConfig+0x334>)
 8000d98:	685b      	ldr	r3, [r3, #4]
 8000d9a:	220c      	movs	r2, #12
 8000d9c:	4013      	ands	r3, r2
 8000d9e:	2b08      	cmp	r3, #8
 8000da0:	d116      	bne.n	8000dd0 <HAL_RCC_OscConfig+0x64>
 8000da2:	4bbf      	ldr	r3, [pc, #764]	; (80010a0 <HAL_RCC_OscConfig+0x334>)
 8000da4:	685a      	ldr	r2, [r3, #4]
 8000da6:	2380      	movs	r3, #128	; 0x80
 8000da8:	025b      	lsls	r3, r3, #9
 8000daa:	401a      	ands	r2, r3
 8000dac:	2380      	movs	r3, #128	; 0x80
 8000dae:	025b      	lsls	r3, r3, #9
 8000db0:	429a      	cmp	r2, r3
 8000db2:	d10d      	bne.n	8000dd0 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000db4:	4bba      	ldr	r3, [pc, #744]	; (80010a0 <HAL_RCC_OscConfig+0x334>)
 8000db6:	681a      	ldr	r2, [r3, #0]
 8000db8:	2380      	movs	r3, #128	; 0x80
 8000dba:	029b      	lsls	r3, r3, #10
 8000dbc:	4013      	ands	r3, r2
 8000dbe:	d100      	bne.n	8000dc2 <HAL_RCC_OscConfig+0x56>
 8000dc0:	e070      	b.n	8000ea4 <HAL_RCC_OscConfig+0x138>
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	685b      	ldr	r3, [r3, #4]
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d000      	beq.n	8000dcc <HAL_RCC_OscConfig+0x60>
 8000dca:	e06b      	b.n	8000ea4 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8000dcc:	2301      	movs	r3, #1
 8000dce:	e2dc      	b.n	800138a <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	685b      	ldr	r3, [r3, #4]
 8000dd4:	2b01      	cmp	r3, #1
 8000dd6:	d107      	bne.n	8000de8 <HAL_RCC_OscConfig+0x7c>
 8000dd8:	4bb1      	ldr	r3, [pc, #708]	; (80010a0 <HAL_RCC_OscConfig+0x334>)
 8000dda:	681a      	ldr	r2, [r3, #0]
 8000ddc:	4bb0      	ldr	r3, [pc, #704]	; (80010a0 <HAL_RCC_OscConfig+0x334>)
 8000dde:	2180      	movs	r1, #128	; 0x80
 8000de0:	0249      	lsls	r1, r1, #9
 8000de2:	430a      	orrs	r2, r1
 8000de4:	601a      	str	r2, [r3, #0]
 8000de6:	e02f      	b.n	8000e48 <HAL_RCC_OscConfig+0xdc>
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	685b      	ldr	r3, [r3, #4]
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d10c      	bne.n	8000e0a <HAL_RCC_OscConfig+0x9e>
 8000df0:	4bab      	ldr	r3, [pc, #684]	; (80010a0 <HAL_RCC_OscConfig+0x334>)
 8000df2:	681a      	ldr	r2, [r3, #0]
 8000df4:	4baa      	ldr	r3, [pc, #680]	; (80010a0 <HAL_RCC_OscConfig+0x334>)
 8000df6:	49ab      	ldr	r1, [pc, #684]	; (80010a4 <HAL_RCC_OscConfig+0x338>)
 8000df8:	400a      	ands	r2, r1
 8000dfa:	601a      	str	r2, [r3, #0]
 8000dfc:	4ba8      	ldr	r3, [pc, #672]	; (80010a0 <HAL_RCC_OscConfig+0x334>)
 8000dfe:	681a      	ldr	r2, [r3, #0]
 8000e00:	4ba7      	ldr	r3, [pc, #668]	; (80010a0 <HAL_RCC_OscConfig+0x334>)
 8000e02:	49a9      	ldr	r1, [pc, #676]	; (80010a8 <HAL_RCC_OscConfig+0x33c>)
 8000e04:	400a      	ands	r2, r1
 8000e06:	601a      	str	r2, [r3, #0]
 8000e08:	e01e      	b.n	8000e48 <HAL_RCC_OscConfig+0xdc>
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	685b      	ldr	r3, [r3, #4]
 8000e0e:	2b05      	cmp	r3, #5
 8000e10:	d10e      	bne.n	8000e30 <HAL_RCC_OscConfig+0xc4>
 8000e12:	4ba3      	ldr	r3, [pc, #652]	; (80010a0 <HAL_RCC_OscConfig+0x334>)
 8000e14:	681a      	ldr	r2, [r3, #0]
 8000e16:	4ba2      	ldr	r3, [pc, #648]	; (80010a0 <HAL_RCC_OscConfig+0x334>)
 8000e18:	2180      	movs	r1, #128	; 0x80
 8000e1a:	02c9      	lsls	r1, r1, #11
 8000e1c:	430a      	orrs	r2, r1
 8000e1e:	601a      	str	r2, [r3, #0]
 8000e20:	4b9f      	ldr	r3, [pc, #636]	; (80010a0 <HAL_RCC_OscConfig+0x334>)
 8000e22:	681a      	ldr	r2, [r3, #0]
 8000e24:	4b9e      	ldr	r3, [pc, #632]	; (80010a0 <HAL_RCC_OscConfig+0x334>)
 8000e26:	2180      	movs	r1, #128	; 0x80
 8000e28:	0249      	lsls	r1, r1, #9
 8000e2a:	430a      	orrs	r2, r1
 8000e2c:	601a      	str	r2, [r3, #0]
 8000e2e:	e00b      	b.n	8000e48 <HAL_RCC_OscConfig+0xdc>
 8000e30:	4b9b      	ldr	r3, [pc, #620]	; (80010a0 <HAL_RCC_OscConfig+0x334>)
 8000e32:	681a      	ldr	r2, [r3, #0]
 8000e34:	4b9a      	ldr	r3, [pc, #616]	; (80010a0 <HAL_RCC_OscConfig+0x334>)
 8000e36:	499b      	ldr	r1, [pc, #620]	; (80010a4 <HAL_RCC_OscConfig+0x338>)
 8000e38:	400a      	ands	r2, r1
 8000e3a:	601a      	str	r2, [r3, #0]
 8000e3c:	4b98      	ldr	r3, [pc, #608]	; (80010a0 <HAL_RCC_OscConfig+0x334>)
 8000e3e:	681a      	ldr	r2, [r3, #0]
 8000e40:	4b97      	ldr	r3, [pc, #604]	; (80010a0 <HAL_RCC_OscConfig+0x334>)
 8000e42:	4999      	ldr	r1, [pc, #612]	; (80010a8 <HAL_RCC_OscConfig+0x33c>)
 8000e44:	400a      	ands	r2, r1
 8000e46:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	685b      	ldr	r3, [r3, #4]
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d014      	beq.n	8000e7a <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e50:	f7ff fcac 	bl	80007ac <HAL_GetTick>
 8000e54:	0003      	movs	r3, r0
 8000e56:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e58:	e008      	b.n	8000e6c <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000e5a:	f7ff fca7 	bl	80007ac <HAL_GetTick>
 8000e5e:	0002      	movs	r2, r0
 8000e60:	69bb      	ldr	r3, [r7, #24]
 8000e62:	1ad3      	subs	r3, r2, r3
 8000e64:	2b64      	cmp	r3, #100	; 0x64
 8000e66:	d901      	bls.n	8000e6c <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8000e68:	2303      	movs	r3, #3
 8000e6a:	e28e      	b.n	800138a <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e6c:	4b8c      	ldr	r3, [pc, #560]	; (80010a0 <HAL_RCC_OscConfig+0x334>)
 8000e6e:	681a      	ldr	r2, [r3, #0]
 8000e70:	2380      	movs	r3, #128	; 0x80
 8000e72:	029b      	lsls	r3, r3, #10
 8000e74:	4013      	ands	r3, r2
 8000e76:	d0f0      	beq.n	8000e5a <HAL_RCC_OscConfig+0xee>
 8000e78:	e015      	b.n	8000ea6 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e7a:	f7ff fc97 	bl	80007ac <HAL_GetTick>
 8000e7e:	0003      	movs	r3, r0
 8000e80:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000e82:	e008      	b.n	8000e96 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000e84:	f7ff fc92 	bl	80007ac <HAL_GetTick>
 8000e88:	0002      	movs	r2, r0
 8000e8a:	69bb      	ldr	r3, [r7, #24]
 8000e8c:	1ad3      	subs	r3, r2, r3
 8000e8e:	2b64      	cmp	r3, #100	; 0x64
 8000e90:	d901      	bls.n	8000e96 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8000e92:	2303      	movs	r3, #3
 8000e94:	e279      	b.n	800138a <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000e96:	4b82      	ldr	r3, [pc, #520]	; (80010a0 <HAL_RCC_OscConfig+0x334>)
 8000e98:	681a      	ldr	r2, [r3, #0]
 8000e9a:	2380      	movs	r3, #128	; 0x80
 8000e9c:	029b      	lsls	r3, r3, #10
 8000e9e:	4013      	ands	r3, r2
 8000ea0:	d1f0      	bne.n	8000e84 <HAL_RCC_OscConfig+0x118>
 8000ea2:	e000      	b.n	8000ea6 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ea4:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	2202      	movs	r2, #2
 8000eac:	4013      	ands	r3, r2
 8000eae:	d100      	bne.n	8000eb2 <HAL_RCC_OscConfig+0x146>
 8000eb0:	e06c      	b.n	8000f8c <HAL_RCC_OscConfig+0x220>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000eb2:	4b7b      	ldr	r3, [pc, #492]	; (80010a0 <HAL_RCC_OscConfig+0x334>)
 8000eb4:	685b      	ldr	r3, [r3, #4]
 8000eb6:	220c      	movs	r2, #12
 8000eb8:	4013      	ands	r3, r2
 8000eba:	d00e      	beq.n	8000eda <HAL_RCC_OscConfig+0x16e>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000ebc:	4b78      	ldr	r3, [pc, #480]	; (80010a0 <HAL_RCC_OscConfig+0x334>)
 8000ebe:	685b      	ldr	r3, [r3, #4]
 8000ec0:	220c      	movs	r2, #12
 8000ec2:	4013      	ands	r3, r2
 8000ec4:	2b08      	cmp	r3, #8
 8000ec6:	d11f      	bne.n	8000f08 <HAL_RCC_OscConfig+0x19c>
 8000ec8:	4b75      	ldr	r3, [pc, #468]	; (80010a0 <HAL_RCC_OscConfig+0x334>)
 8000eca:	685a      	ldr	r2, [r3, #4]
 8000ecc:	2380      	movs	r3, #128	; 0x80
 8000ece:	025b      	lsls	r3, r3, #9
 8000ed0:	401a      	ands	r2, r3
 8000ed2:	2380      	movs	r3, #128	; 0x80
 8000ed4:	021b      	lsls	r3, r3, #8
 8000ed6:	429a      	cmp	r2, r3
 8000ed8:	d116      	bne.n	8000f08 <HAL_RCC_OscConfig+0x19c>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000eda:	4b71      	ldr	r3, [pc, #452]	; (80010a0 <HAL_RCC_OscConfig+0x334>)
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	2202      	movs	r2, #2
 8000ee0:	4013      	ands	r3, r2
 8000ee2:	d005      	beq.n	8000ef0 <HAL_RCC_OscConfig+0x184>
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	68db      	ldr	r3, [r3, #12]
 8000ee8:	2b01      	cmp	r3, #1
 8000eea:	d001      	beq.n	8000ef0 <HAL_RCC_OscConfig+0x184>
      {
        return HAL_ERROR;
 8000eec:	2301      	movs	r3, #1
 8000eee:	e24c      	b.n	800138a <HAL_RCC_OscConfig+0x61e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000ef0:	4b6b      	ldr	r3, [pc, #428]	; (80010a0 <HAL_RCC_OscConfig+0x334>)
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	22f8      	movs	r2, #248	; 0xf8
 8000ef6:	4393      	bics	r3, r2
 8000ef8:	0019      	movs	r1, r3
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	691b      	ldr	r3, [r3, #16]
 8000efe:	00da      	lsls	r2, r3, #3
 8000f00:	4b67      	ldr	r3, [pc, #412]	; (80010a0 <HAL_RCC_OscConfig+0x334>)
 8000f02:	430a      	orrs	r2, r1
 8000f04:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000f06:	e041      	b.n	8000f8c <HAL_RCC_OscConfig+0x220>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	68db      	ldr	r3, [r3, #12]
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d024      	beq.n	8000f5a <HAL_RCC_OscConfig+0x1ee>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000f10:	4b63      	ldr	r3, [pc, #396]	; (80010a0 <HAL_RCC_OscConfig+0x334>)
 8000f12:	681a      	ldr	r2, [r3, #0]
 8000f14:	4b62      	ldr	r3, [pc, #392]	; (80010a0 <HAL_RCC_OscConfig+0x334>)
 8000f16:	2101      	movs	r1, #1
 8000f18:	430a      	orrs	r2, r1
 8000f1a:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f1c:	f7ff fc46 	bl	80007ac <HAL_GetTick>
 8000f20:	0003      	movs	r3, r0
 8000f22:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f24:	e008      	b.n	8000f38 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000f26:	f7ff fc41 	bl	80007ac <HAL_GetTick>
 8000f2a:	0002      	movs	r2, r0
 8000f2c:	69bb      	ldr	r3, [r7, #24]
 8000f2e:	1ad3      	subs	r3, r2, r3
 8000f30:	2b02      	cmp	r3, #2
 8000f32:	d901      	bls.n	8000f38 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8000f34:	2303      	movs	r3, #3
 8000f36:	e228      	b.n	800138a <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f38:	4b59      	ldr	r3, [pc, #356]	; (80010a0 <HAL_RCC_OscConfig+0x334>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	2202      	movs	r2, #2
 8000f3e:	4013      	ands	r3, r2
 8000f40:	d0f1      	beq.n	8000f26 <HAL_RCC_OscConfig+0x1ba>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f42:	4b57      	ldr	r3, [pc, #348]	; (80010a0 <HAL_RCC_OscConfig+0x334>)
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	22f8      	movs	r2, #248	; 0xf8
 8000f48:	4393      	bics	r3, r2
 8000f4a:	0019      	movs	r1, r3
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	691b      	ldr	r3, [r3, #16]
 8000f50:	00da      	lsls	r2, r3, #3
 8000f52:	4b53      	ldr	r3, [pc, #332]	; (80010a0 <HAL_RCC_OscConfig+0x334>)
 8000f54:	430a      	orrs	r2, r1
 8000f56:	601a      	str	r2, [r3, #0]
 8000f58:	e018      	b.n	8000f8c <HAL_RCC_OscConfig+0x220>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000f5a:	4b51      	ldr	r3, [pc, #324]	; (80010a0 <HAL_RCC_OscConfig+0x334>)
 8000f5c:	681a      	ldr	r2, [r3, #0]
 8000f5e:	4b50      	ldr	r3, [pc, #320]	; (80010a0 <HAL_RCC_OscConfig+0x334>)
 8000f60:	2101      	movs	r1, #1
 8000f62:	438a      	bics	r2, r1
 8000f64:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f66:	f7ff fc21 	bl	80007ac <HAL_GetTick>
 8000f6a:	0003      	movs	r3, r0
 8000f6c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000f6e:	e008      	b.n	8000f82 <HAL_RCC_OscConfig+0x216>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000f70:	f7ff fc1c 	bl	80007ac <HAL_GetTick>
 8000f74:	0002      	movs	r2, r0
 8000f76:	69bb      	ldr	r3, [r7, #24]
 8000f78:	1ad3      	subs	r3, r2, r3
 8000f7a:	2b02      	cmp	r3, #2
 8000f7c:	d901      	bls.n	8000f82 <HAL_RCC_OscConfig+0x216>
          {
            return HAL_TIMEOUT;
 8000f7e:	2303      	movs	r3, #3
 8000f80:	e203      	b.n	800138a <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000f82:	4b47      	ldr	r3, [pc, #284]	; (80010a0 <HAL_RCC_OscConfig+0x334>)
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	2202      	movs	r2, #2
 8000f88:	4013      	ands	r3, r2
 8000f8a:	d1f1      	bne.n	8000f70 <HAL_RCC_OscConfig+0x204>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	2208      	movs	r2, #8
 8000f92:	4013      	ands	r3, r2
 8000f94:	d036      	beq.n	8001004 <HAL_RCC_OscConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	69db      	ldr	r3, [r3, #28]
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d019      	beq.n	8000fd2 <HAL_RCC_OscConfig+0x266>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000f9e:	4b40      	ldr	r3, [pc, #256]	; (80010a0 <HAL_RCC_OscConfig+0x334>)
 8000fa0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000fa2:	4b3f      	ldr	r3, [pc, #252]	; (80010a0 <HAL_RCC_OscConfig+0x334>)
 8000fa4:	2101      	movs	r1, #1
 8000fa6:	430a      	orrs	r2, r1
 8000fa8:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000faa:	f7ff fbff 	bl	80007ac <HAL_GetTick>
 8000fae:	0003      	movs	r3, r0
 8000fb0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000fb2:	e008      	b.n	8000fc6 <HAL_RCC_OscConfig+0x25a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000fb4:	f7ff fbfa 	bl	80007ac <HAL_GetTick>
 8000fb8:	0002      	movs	r2, r0
 8000fba:	69bb      	ldr	r3, [r7, #24]
 8000fbc:	1ad3      	subs	r3, r2, r3
 8000fbe:	2b02      	cmp	r3, #2
 8000fc0:	d901      	bls.n	8000fc6 <HAL_RCC_OscConfig+0x25a>
        {
          return HAL_TIMEOUT;
 8000fc2:	2303      	movs	r3, #3
 8000fc4:	e1e1      	b.n	800138a <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000fc6:	4b36      	ldr	r3, [pc, #216]	; (80010a0 <HAL_RCC_OscConfig+0x334>)
 8000fc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fca:	2202      	movs	r2, #2
 8000fcc:	4013      	ands	r3, r2
 8000fce:	d0f1      	beq.n	8000fb4 <HAL_RCC_OscConfig+0x248>
 8000fd0:	e018      	b.n	8001004 <HAL_RCC_OscConfig+0x298>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000fd2:	4b33      	ldr	r3, [pc, #204]	; (80010a0 <HAL_RCC_OscConfig+0x334>)
 8000fd4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000fd6:	4b32      	ldr	r3, [pc, #200]	; (80010a0 <HAL_RCC_OscConfig+0x334>)
 8000fd8:	2101      	movs	r1, #1
 8000fda:	438a      	bics	r2, r1
 8000fdc:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000fde:	f7ff fbe5 	bl	80007ac <HAL_GetTick>
 8000fe2:	0003      	movs	r3, r0
 8000fe4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000fe6:	e008      	b.n	8000ffa <HAL_RCC_OscConfig+0x28e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000fe8:	f7ff fbe0 	bl	80007ac <HAL_GetTick>
 8000fec:	0002      	movs	r2, r0
 8000fee:	69bb      	ldr	r3, [r7, #24]
 8000ff0:	1ad3      	subs	r3, r2, r3
 8000ff2:	2b02      	cmp	r3, #2
 8000ff4:	d901      	bls.n	8000ffa <HAL_RCC_OscConfig+0x28e>
        {
          return HAL_TIMEOUT;
 8000ff6:	2303      	movs	r3, #3
 8000ff8:	e1c7      	b.n	800138a <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000ffa:	4b29      	ldr	r3, [pc, #164]	; (80010a0 <HAL_RCC_OscConfig+0x334>)
 8000ffc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ffe:	2202      	movs	r2, #2
 8001000:	4013      	ands	r3, r2
 8001002:	d1f1      	bne.n	8000fe8 <HAL_RCC_OscConfig+0x27c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	2204      	movs	r2, #4
 800100a:	4013      	ands	r3, r2
 800100c:	d100      	bne.n	8001010 <HAL_RCC_OscConfig+0x2a4>
 800100e:	e0b5      	b.n	800117c <HAL_RCC_OscConfig+0x410>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001010:	201f      	movs	r0, #31
 8001012:	183b      	adds	r3, r7, r0
 8001014:	2200      	movs	r2, #0
 8001016:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001018:	4b21      	ldr	r3, [pc, #132]	; (80010a0 <HAL_RCC_OscConfig+0x334>)
 800101a:	69da      	ldr	r2, [r3, #28]
 800101c:	2380      	movs	r3, #128	; 0x80
 800101e:	055b      	lsls	r3, r3, #21
 8001020:	4013      	ands	r3, r2
 8001022:	d110      	bne.n	8001046 <HAL_RCC_OscConfig+0x2da>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001024:	4b1e      	ldr	r3, [pc, #120]	; (80010a0 <HAL_RCC_OscConfig+0x334>)
 8001026:	69da      	ldr	r2, [r3, #28]
 8001028:	4b1d      	ldr	r3, [pc, #116]	; (80010a0 <HAL_RCC_OscConfig+0x334>)
 800102a:	2180      	movs	r1, #128	; 0x80
 800102c:	0549      	lsls	r1, r1, #21
 800102e:	430a      	orrs	r2, r1
 8001030:	61da      	str	r2, [r3, #28]
 8001032:	4b1b      	ldr	r3, [pc, #108]	; (80010a0 <HAL_RCC_OscConfig+0x334>)
 8001034:	69da      	ldr	r2, [r3, #28]
 8001036:	2380      	movs	r3, #128	; 0x80
 8001038:	055b      	lsls	r3, r3, #21
 800103a:	4013      	ands	r3, r2
 800103c:	60fb      	str	r3, [r7, #12]
 800103e:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001040:	183b      	adds	r3, r7, r0
 8001042:	2201      	movs	r2, #1
 8001044:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001046:	4b19      	ldr	r3, [pc, #100]	; (80010ac <HAL_RCC_OscConfig+0x340>)
 8001048:	681a      	ldr	r2, [r3, #0]
 800104a:	2380      	movs	r3, #128	; 0x80
 800104c:	005b      	lsls	r3, r3, #1
 800104e:	4013      	ands	r3, r2
 8001050:	d11a      	bne.n	8001088 <HAL_RCC_OscConfig+0x31c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001052:	4b16      	ldr	r3, [pc, #88]	; (80010ac <HAL_RCC_OscConfig+0x340>)
 8001054:	681a      	ldr	r2, [r3, #0]
 8001056:	4b15      	ldr	r3, [pc, #84]	; (80010ac <HAL_RCC_OscConfig+0x340>)
 8001058:	2180      	movs	r1, #128	; 0x80
 800105a:	0049      	lsls	r1, r1, #1
 800105c:	430a      	orrs	r2, r1
 800105e:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001060:	f7ff fba4 	bl	80007ac <HAL_GetTick>
 8001064:	0003      	movs	r3, r0
 8001066:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001068:	e008      	b.n	800107c <HAL_RCC_OscConfig+0x310>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800106a:	f7ff fb9f 	bl	80007ac <HAL_GetTick>
 800106e:	0002      	movs	r2, r0
 8001070:	69bb      	ldr	r3, [r7, #24]
 8001072:	1ad3      	subs	r3, r2, r3
 8001074:	2b64      	cmp	r3, #100	; 0x64
 8001076:	d901      	bls.n	800107c <HAL_RCC_OscConfig+0x310>
        {
          return HAL_TIMEOUT;
 8001078:	2303      	movs	r3, #3
 800107a:	e186      	b.n	800138a <HAL_RCC_OscConfig+0x61e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800107c:	4b0b      	ldr	r3, [pc, #44]	; (80010ac <HAL_RCC_OscConfig+0x340>)
 800107e:	681a      	ldr	r2, [r3, #0]
 8001080:	2380      	movs	r3, #128	; 0x80
 8001082:	005b      	lsls	r3, r3, #1
 8001084:	4013      	ands	r3, r2
 8001086:	d0f0      	beq.n	800106a <HAL_RCC_OscConfig+0x2fe>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	689b      	ldr	r3, [r3, #8]
 800108c:	2b01      	cmp	r3, #1
 800108e:	d10f      	bne.n	80010b0 <HAL_RCC_OscConfig+0x344>
 8001090:	4b03      	ldr	r3, [pc, #12]	; (80010a0 <HAL_RCC_OscConfig+0x334>)
 8001092:	6a1a      	ldr	r2, [r3, #32]
 8001094:	4b02      	ldr	r3, [pc, #8]	; (80010a0 <HAL_RCC_OscConfig+0x334>)
 8001096:	2101      	movs	r1, #1
 8001098:	430a      	orrs	r2, r1
 800109a:	621a      	str	r2, [r3, #32]
 800109c:	e036      	b.n	800110c <HAL_RCC_OscConfig+0x3a0>
 800109e:	46c0      	nop			; (mov r8, r8)
 80010a0:	40021000 	.word	0x40021000
 80010a4:	fffeffff 	.word	0xfffeffff
 80010a8:	fffbffff 	.word	0xfffbffff
 80010ac:	40007000 	.word	0x40007000
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	689b      	ldr	r3, [r3, #8]
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d10c      	bne.n	80010d2 <HAL_RCC_OscConfig+0x366>
 80010b8:	4bb6      	ldr	r3, [pc, #728]	; (8001394 <HAL_RCC_OscConfig+0x628>)
 80010ba:	6a1a      	ldr	r2, [r3, #32]
 80010bc:	4bb5      	ldr	r3, [pc, #724]	; (8001394 <HAL_RCC_OscConfig+0x628>)
 80010be:	2101      	movs	r1, #1
 80010c0:	438a      	bics	r2, r1
 80010c2:	621a      	str	r2, [r3, #32]
 80010c4:	4bb3      	ldr	r3, [pc, #716]	; (8001394 <HAL_RCC_OscConfig+0x628>)
 80010c6:	6a1a      	ldr	r2, [r3, #32]
 80010c8:	4bb2      	ldr	r3, [pc, #712]	; (8001394 <HAL_RCC_OscConfig+0x628>)
 80010ca:	2104      	movs	r1, #4
 80010cc:	438a      	bics	r2, r1
 80010ce:	621a      	str	r2, [r3, #32]
 80010d0:	e01c      	b.n	800110c <HAL_RCC_OscConfig+0x3a0>
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	689b      	ldr	r3, [r3, #8]
 80010d6:	2b05      	cmp	r3, #5
 80010d8:	d10c      	bne.n	80010f4 <HAL_RCC_OscConfig+0x388>
 80010da:	4bae      	ldr	r3, [pc, #696]	; (8001394 <HAL_RCC_OscConfig+0x628>)
 80010dc:	6a1a      	ldr	r2, [r3, #32]
 80010de:	4bad      	ldr	r3, [pc, #692]	; (8001394 <HAL_RCC_OscConfig+0x628>)
 80010e0:	2104      	movs	r1, #4
 80010e2:	430a      	orrs	r2, r1
 80010e4:	621a      	str	r2, [r3, #32]
 80010e6:	4bab      	ldr	r3, [pc, #684]	; (8001394 <HAL_RCC_OscConfig+0x628>)
 80010e8:	6a1a      	ldr	r2, [r3, #32]
 80010ea:	4baa      	ldr	r3, [pc, #680]	; (8001394 <HAL_RCC_OscConfig+0x628>)
 80010ec:	2101      	movs	r1, #1
 80010ee:	430a      	orrs	r2, r1
 80010f0:	621a      	str	r2, [r3, #32]
 80010f2:	e00b      	b.n	800110c <HAL_RCC_OscConfig+0x3a0>
 80010f4:	4ba7      	ldr	r3, [pc, #668]	; (8001394 <HAL_RCC_OscConfig+0x628>)
 80010f6:	6a1a      	ldr	r2, [r3, #32]
 80010f8:	4ba6      	ldr	r3, [pc, #664]	; (8001394 <HAL_RCC_OscConfig+0x628>)
 80010fa:	2101      	movs	r1, #1
 80010fc:	438a      	bics	r2, r1
 80010fe:	621a      	str	r2, [r3, #32]
 8001100:	4ba4      	ldr	r3, [pc, #656]	; (8001394 <HAL_RCC_OscConfig+0x628>)
 8001102:	6a1a      	ldr	r2, [r3, #32]
 8001104:	4ba3      	ldr	r3, [pc, #652]	; (8001394 <HAL_RCC_OscConfig+0x628>)
 8001106:	2104      	movs	r1, #4
 8001108:	438a      	bics	r2, r1
 800110a:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	689b      	ldr	r3, [r3, #8]
 8001110:	2b00      	cmp	r3, #0
 8001112:	d014      	beq.n	800113e <HAL_RCC_OscConfig+0x3d2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001114:	f7ff fb4a 	bl	80007ac <HAL_GetTick>
 8001118:	0003      	movs	r3, r0
 800111a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800111c:	e009      	b.n	8001132 <HAL_RCC_OscConfig+0x3c6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800111e:	f7ff fb45 	bl	80007ac <HAL_GetTick>
 8001122:	0002      	movs	r2, r0
 8001124:	69bb      	ldr	r3, [r7, #24]
 8001126:	1ad3      	subs	r3, r2, r3
 8001128:	4a9b      	ldr	r2, [pc, #620]	; (8001398 <HAL_RCC_OscConfig+0x62c>)
 800112a:	4293      	cmp	r3, r2
 800112c:	d901      	bls.n	8001132 <HAL_RCC_OscConfig+0x3c6>
        {
          return HAL_TIMEOUT;
 800112e:	2303      	movs	r3, #3
 8001130:	e12b      	b.n	800138a <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001132:	4b98      	ldr	r3, [pc, #608]	; (8001394 <HAL_RCC_OscConfig+0x628>)
 8001134:	6a1b      	ldr	r3, [r3, #32]
 8001136:	2202      	movs	r2, #2
 8001138:	4013      	ands	r3, r2
 800113a:	d0f0      	beq.n	800111e <HAL_RCC_OscConfig+0x3b2>
 800113c:	e013      	b.n	8001166 <HAL_RCC_OscConfig+0x3fa>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800113e:	f7ff fb35 	bl	80007ac <HAL_GetTick>
 8001142:	0003      	movs	r3, r0
 8001144:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001146:	e009      	b.n	800115c <HAL_RCC_OscConfig+0x3f0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001148:	f7ff fb30 	bl	80007ac <HAL_GetTick>
 800114c:	0002      	movs	r2, r0
 800114e:	69bb      	ldr	r3, [r7, #24]
 8001150:	1ad3      	subs	r3, r2, r3
 8001152:	4a91      	ldr	r2, [pc, #580]	; (8001398 <HAL_RCC_OscConfig+0x62c>)
 8001154:	4293      	cmp	r3, r2
 8001156:	d901      	bls.n	800115c <HAL_RCC_OscConfig+0x3f0>
        {
          return HAL_TIMEOUT;
 8001158:	2303      	movs	r3, #3
 800115a:	e116      	b.n	800138a <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800115c:	4b8d      	ldr	r3, [pc, #564]	; (8001394 <HAL_RCC_OscConfig+0x628>)
 800115e:	6a1b      	ldr	r3, [r3, #32]
 8001160:	2202      	movs	r2, #2
 8001162:	4013      	ands	r3, r2
 8001164:	d1f0      	bne.n	8001148 <HAL_RCC_OscConfig+0x3dc>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001166:	231f      	movs	r3, #31
 8001168:	18fb      	adds	r3, r7, r3
 800116a:	781b      	ldrb	r3, [r3, #0]
 800116c:	2b01      	cmp	r3, #1
 800116e:	d105      	bne.n	800117c <HAL_RCC_OscConfig+0x410>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001170:	4b88      	ldr	r3, [pc, #544]	; (8001394 <HAL_RCC_OscConfig+0x628>)
 8001172:	69da      	ldr	r2, [r3, #28]
 8001174:	4b87      	ldr	r3, [pc, #540]	; (8001394 <HAL_RCC_OscConfig+0x628>)
 8001176:	4989      	ldr	r1, [pc, #548]	; (800139c <HAL_RCC_OscConfig+0x630>)
 8001178:	400a      	ands	r2, r1
 800117a:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	2210      	movs	r2, #16
 8001182:	4013      	ands	r3, r2
 8001184:	d063      	beq.n	800124e <HAL_RCC_OscConfig+0x4e2>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	695b      	ldr	r3, [r3, #20]
 800118a:	2b01      	cmp	r3, #1
 800118c:	d12a      	bne.n	80011e4 <HAL_RCC_OscConfig+0x478>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800118e:	4b81      	ldr	r3, [pc, #516]	; (8001394 <HAL_RCC_OscConfig+0x628>)
 8001190:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001192:	4b80      	ldr	r3, [pc, #512]	; (8001394 <HAL_RCC_OscConfig+0x628>)
 8001194:	2104      	movs	r1, #4
 8001196:	430a      	orrs	r2, r1
 8001198:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 800119a:	4b7e      	ldr	r3, [pc, #504]	; (8001394 <HAL_RCC_OscConfig+0x628>)
 800119c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800119e:	4b7d      	ldr	r3, [pc, #500]	; (8001394 <HAL_RCC_OscConfig+0x628>)
 80011a0:	2101      	movs	r1, #1
 80011a2:	430a      	orrs	r2, r1
 80011a4:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011a6:	f7ff fb01 	bl	80007ac <HAL_GetTick>
 80011aa:	0003      	movs	r3, r0
 80011ac:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80011ae:	e008      	b.n	80011c2 <HAL_RCC_OscConfig+0x456>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80011b0:	f7ff fafc 	bl	80007ac <HAL_GetTick>
 80011b4:	0002      	movs	r2, r0
 80011b6:	69bb      	ldr	r3, [r7, #24]
 80011b8:	1ad3      	subs	r3, r2, r3
 80011ba:	2b02      	cmp	r3, #2
 80011bc:	d901      	bls.n	80011c2 <HAL_RCC_OscConfig+0x456>
        {
          return HAL_TIMEOUT;
 80011be:	2303      	movs	r3, #3
 80011c0:	e0e3      	b.n	800138a <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80011c2:	4b74      	ldr	r3, [pc, #464]	; (8001394 <HAL_RCC_OscConfig+0x628>)
 80011c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80011c6:	2202      	movs	r2, #2
 80011c8:	4013      	ands	r3, r2
 80011ca:	d0f1      	beq.n	80011b0 <HAL_RCC_OscConfig+0x444>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80011cc:	4b71      	ldr	r3, [pc, #452]	; (8001394 <HAL_RCC_OscConfig+0x628>)
 80011ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80011d0:	22f8      	movs	r2, #248	; 0xf8
 80011d2:	4393      	bics	r3, r2
 80011d4:	0019      	movs	r1, r3
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	699b      	ldr	r3, [r3, #24]
 80011da:	00da      	lsls	r2, r3, #3
 80011dc:	4b6d      	ldr	r3, [pc, #436]	; (8001394 <HAL_RCC_OscConfig+0x628>)
 80011de:	430a      	orrs	r2, r1
 80011e0:	635a      	str	r2, [r3, #52]	; 0x34
 80011e2:	e034      	b.n	800124e <HAL_RCC_OscConfig+0x4e2>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	695b      	ldr	r3, [r3, #20]
 80011e8:	3305      	adds	r3, #5
 80011ea:	d111      	bne.n	8001210 <HAL_RCC_OscConfig+0x4a4>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80011ec:	4b69      	ldr	r3, [pc, #420]	; (8001394 <HAL_RCC_OscConfig+0x628>)
 80011ee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80011f0:	4b68      	ldr	r3, [pc, #416]	; (8001394 <HAL_RCC_OscConfig+0x628>)
 80011f2:	2104      	movs	r1, #4
 80011f4:	438a      	bics	r2, r1
 80011f6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80011f8:	4b66      	ldr	r3, [pc, #408]	; (8001394 <HAL_RCC_OscConfig+0x628>)
 80011fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80011fc:	22f8      	movs	r2, #248	; 0xf8
 80011fe:	4393      	bics	r3, r2
 8001200:	0019      	movs	r1, r3
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	699b      	ldr	r3, [r3, #24]
 8001206:	00da      	lsls	r2, r3, #3
 8001208:	4b62      	ldr	r3, [pc, #392]	; (8001394 <HAL_RCC_OscConfig+0x628>)
 800120a:	430a      	orrs	r2, r1
 800120c:	635a      	str	r2, [r3, #52]	; 0x34
 800120e:	e01e      	b.n	800124e <HAL_RCC_OscConfig+0x4e2>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001210:	4b60      	ldr	r3, [pc, #384]	; (8001394 <HAL_RCC_OscConfig+0x628>)
 8001212:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001214:	4b5f      	ldr	r3, [pc, #380]	; (8001394 <HAL_RCC_OscConfig+0x628>)
 8001216:	2104      	movs	r1, #4
 8001218:	430a      	orrs	r2, r1
 800121a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 800121c:	4b5d      	ldr	r3, [pc, #372]	; (8001394 <HAL_RCC_OscConfig+0x628>)
 800121e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001220:	4b5c      	ldr	r3, [pc, #368]	; (8001394 <HAL_RCC_OscConfig+0x628>)
 8001222:	2101      	movs	r1, #1
 8001224:	438a      	bics	r2, r1
 8001226:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001228:	f7ff fac0 	bl	80007ac <HAL_GetTick>
 800122c:	0003      	movs	r3, r0
 800122e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001230:	e008      	b.n	8001244 <HAL_RCC_OscConfig+0x4d8>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001232:	f7ff fabb 	bl	80007ac <HAL_GetTick>
 8001236:	0002      	movs	r2, r0
 8001238:	69bb      	ldr	r3, [r7, #24]
 800123a:	1ad3      	subs	r3, r2, r3
 800123c:	2b02      	cmp	r3, #2
 800123e:	d901      	bls.n	8001244 <HAL_RCC_OscConfig+0x4d8>
        {
          return HAL_TIMEOUT;
 8001240:	2303      	movs	r3, #3
 8001242:	e0a2      	b.n	800138a <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001244:	4b53      	ldr	r3, [pc, #332]	; (8001394 <HAL_RCC_OscConfig+0x628>)
 8001246:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001248:	2202      	movs	r2, #2
 800124a:	4013      	ands	r3, r2
 800124c:	d1f1      	bne.n	8001232 <HAL_RCC_OscConfig+0x4c6>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	6a1b      	ldr	r3, [r3, #32]
 8001252:	2b00      	cmp	r3, #0
 8001254:	d100      	bne.n	8001258 <HAL_RCC_OscConfig+0x4ec>
 8001256:	e097      	b.n	8001388 <HAL_RCC_OscConfig+0x61c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001258:	4b4e      	ldr	r3, [pc, #312]	; (8001394 <HAL_RCC_OscConfig+0x628>)
 800125a:	685b      	ldr	r3, [r3, #4]
 800125c:	220c      	movs	r2, #12
 800125e:	4013      	ands	r3, r2
 8001260:	2b08      	cmp	r3, #8
 8001262:	d100      	bne.n	8001266 <HAL_RCC_OscConfig+0x4fa>
 8001264:	e06b      	b.n	800133e <HAL_RCC_OscConfig+0x5d2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	6a1b      	ldr	r3, [r3, #32]
 800126a:	2b02      	cmp	r3, #2
 800126c:	d14c      	bne.n	8001308 <HAL_RCC_OscConfig+0x59c>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800126e:	4b49      	ldr	r3, [pc, #292]	; (8001394 <HAL_RCC_OscConfig+0x628>)
 8001270:	681a      	ldr	r2, [r3, #0]
 8001272:	4b48      	ldr	r3, [pc, #288]	; (8001394 <HAL_RCC_OscConfig+0x628>)
 8001274:	494a      	ldr	r1, [pc, #296]	; (80013a0 <HAL_RCC_OscConfig+0x634>)
 8001276:	400a      	ands	r2, r1
 8001278:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800127a:	f7ff fa97 	bl	80007ac <HAL_GetTick>
 800127e:	0003      	movs	r3, r0
 8001280:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001282:	e008      	b.n	8001296 <HAL_RCC_OscConfig+0x52a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001284:	f7ff fa92 	bl	80007ac <HAL_GetTick>
 8001288:	0002      	movs	r2, r0
 800128a:	69bb      	ldr	r3, [r7, #24]
 800128c:	1ad3      	subs	r3, r2, r3
 800128e:	2b02      	cmp	r3, #2
 8001290:	d901      	bls.n	8001296 <HAL_RCC_OscConfig+0x52a>
          {
            return HAL_TIMEOUT;
 8001292:	2303      	movs	r3, #3
 8001294:	e079      	b.n	800138a <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001296:	4b3f      	ldr	r3, [pc, #252]	; (8001394 <HAL_RCC_OscConfig+0x628>)
 8001298:	681a      	ldr	r2, [r3, #0]
 800129a:	2380      	movs	r3, #128	; 0x80
 800129c:	049b      	lsls	r3, r3, #18
 800129e:	4013      	ands	r3, r2
 80012a0:	d1f0      	bne.n	8001284 <HAL_RCC_OscConfig+0x518>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80012a2:	4b3c      	ldr	r3, [pc, #240]	; (8001394 <HAL_RCC_OscConfig+0x628>)
 80012a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012a6:	220f      	movs	r2, #15
 80012a8:	4393      	bics	r3, r2
 80012aa:	0019      	movs	r1, r3
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80012b0:	4b38      	ldr	r3, [pc, #224]	; (8001394 <HAL_RCC_OscConfig+0x628>)
 80012b2:	430a      	orrs	r2, r1
 80012b4:	62da      	str	r2, [r3, #44]	; 0x2c
 80012b6:	4b37      	ldr	r3, [pc, #220]	; (8001394 <HAL_RCC_OscConfig+0x628>)
 80012b8:	685b      	ldr	r3, [r3, #4]
 80012ba:	4a3a      	ldr	r2, [pc, #232]	; (80013a4 <HAL_RCC_OscConfig+0x638>)
 80012bc:	4013      	ands	r3, r2
 80012be:	0019      	movs	r1, r3
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012c8:	431a      	orrs	r2, r3
 80012ca:	4b32      	ldr	r3, [pc, #200]	; (8001394 <HAL_RCC_OscConfig+0x628>)
 80012cc:	430a      	orrs	r2, r1
 80012ce:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80012d0:	4b30      	ldr	r3, [pc, #192]	; (8001394 <HAL_RCC_OscConfig+0x628>)
 80012d2:	681a      	ldr	r2, [r3, #0]
 80012d4:	4b2f      	ldr	r3, [pc, #188]	; (8001394 <HAL_RCC_OscConfig+0x628>)
 80012d6:	2180      	movs	r1, #128	; 0x80
 80012d8:	0449      	lsls	r1, r1, #17
 80012da:	430a      	orrs	r2, r1
 80012dc:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012de:	f7ff fa65 	bl	80007ac <HAL_GetTick>
 80012e2:	0003      	movs	r3, r0
 80012e4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80012e6:	e008      	b.n	80012fa <HAL_RCC_OscConfig+0x58e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80012e8:	f7ff fa60 	bl	80007ac <HAL_GetTick>
 80012ec:	0002      	movs	r2, r0
 80012ee:	69bb      	ldr	r3, [r7, #24]
 80012f0:	1ad3      	subs	r3, r2, r3
 80012f2:	2b02      	cmp	r3, #2
 80012f4:	d901      	bls.n	80012fa <HAL_RCC_OscConfig+0x58e>
          {
            return HAL_TIMEOUT;
 80012f6:	2303      	movs	r3, #3
 80012f8:	e047      	b.n	800138a <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80012fa:	4b26      	ldr	r3, [pc, #152]	; (8001394 <HAL_RCC_OscConfig+0x628>)
 80012fc:	681a      	ldr	r2, [r3, #0]
 80012fe:	2380      	movs	r3, #128	; 0x80
 8001300:	049b      	lsls	r3, r3, #18
 8001302:	4013      	ands	r3, r2
 8001304:	d0f0      	beq.n	80012e8 <HAL_RCC_OscConfig+0x57c>
 8001306:	e03f      	b.n	8001388 <HAL_RCC_OscConfig+0x61c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001308:	4b22      	ldr	r3, [pc, #136]	; (8001394 <HAL_RCC_OscConfig+0x628>)
 800130a:	681a      	ldr	r2, [r3, #0]
 800130c:	4b21      	ldr	r3, [pc, #132]	; (8001394 <HAL_RCC_OscConfig+0x628>)
 800130e:	4924      	ldr	r1, [pc, #144]	; (80013a0 <HAL_RCC_OscConfig+0x634>)
 8001310:	400a      	ands	r2, r1
 8001312:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001314:	f7ff fa4a 	bl	80007ac <HAL_GetTick>
 8001318:	0003      	movs	r3, r0
 800131a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800131c:	e008      	b.n	8001330 <HAL_RCC_OscConfig+0x5c4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800131e:	f7ff fa45 	bl	80007ac <HAL_GetTick>
 8001322:	0002      	movs	r2, r0
 8001324:	69bb      	ldr	r3, [r7, #24]
 8001326:	1ad3      	subs	r3, r2, r3
 8001328:	2b02      	cmp	r3, #2
 800132a:	d901      	bls.n	8001330 <HAL_RCC_OscConfig+0x5c4>
          {
            return HAL_TIMEOUT;
 800132c:	2303      	movs	r3, #3
 800132e:	e02c      	b.n	800138a <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001330:	4b18      	ldr	r3, [pc, #96]	; (8001394 <HAL_RCC_OscConfig+0x628>)
 8001332:	681a      	ldr	r2, [r3, #0]
 8001334:	2380      	movs	r3, #128	; 0x80
 8001336:	049b      	lsls	r3, r3, #18
 8001338:	4013      	ands	r3, r2
 800133a:	d1f0      	bne.n	800131e <HAL_RCC_OscConfig+0x5b2>
 800133c:	e024      	b.n	8001388 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	6a1b      	ldr	r3, [r3, #32]
 8001342:	2b01      	cmp	r3, #1
 8001344:	d101      	bne.n	800134a <HAL_RCC_OscConfig+0x5de>
      {
        return HAL_ERROR;
 8001346:	2301      	movs	r3, #1
 8001348:	e01f      	b.n	800138a <HAL_RCC_OscConfig+0x61e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 800134a:	4b12      	ldr	r3, [pc, #72]	; (8001394 <HAL_RCC_OscConfig+0x628>)
 800134c:	685b      	ldr	r3, [r3, #4]
 800134e:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8001350:	4b10      	ldr	r3, [pc, #64]	; (8001394 <HAL_RCC_OscConfig+0x628>)
 8001352:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001354:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001356:	697a      	ldr	r2, [r7, #20]
 8001358:	2380      	movs	r3, #128	; 0x80
 800135a:	025b      	lsls	r3, r3, #9
 800135c:	401a      	ands	r2, r3
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001362:	429a      	cmp	r2, r3
 8001364:	d10e      	bne.n	8001384 <HAL_RCC_OscConfig+0x618>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001366:	693b      	ldr	r3, [r7, #16]
 8001368:	220f      	movs	r2, #15
 800136a:	401a      	ands	r2, r3
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001370:	429a      	cmp	r2, r3
 8001372:	d107      	bne.n	8001384 <HAL_RCC_OscConfig+0x618>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8001374:	697a      	ldr	r2, [r7, #20]
 8001376:	23f0      	movs	r3, #240	; 0xf0
 8001378:	039b      	lsls	r3, r3, #14
 800137a:	401a      	ands	r2, r3
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001380:	429a      	cmp	r2, r3
 8001382:	d001      	beq.n	8001388 <HAL_RCC_OscConfig+0x61c>
        {
          return HAL_ERROR;
 8001384:	2301      	movs	r3, #1
 8001386:	e000      	b.n	800138a <HAL_RCC_OscConfig+0x61e>
        }
      }
    }
  }

  return HAL_OK;
 8001388:	2300      	movs	r3, #0
}
 800138a:	0018      	movs	r0, r3
 800138c:	46bd      	mov	sp, r7
 800138e:	b008      	add	sp, #32
 8001390:	bd80      	pop	{r7, pc}
 8001392:	46c0      	nop			; (mov r8, r8)
 8001394:	40021000 	.word	0x40021000
 8001398:	00001388 	.word	0x00001388
 800139c:	efffffff 	.word	0xefffffff
 80013a0:	feffffff 	.word	0xfeffffff
 80013a4:	ffc2ffff 	.word	0xffc2ffff

080013a8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b084      	sub	sp, #16
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
 80013b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d101      	bne.n	80013bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80013b8:	2301      	movs	r3, #1
 80013ba:	e0b3      	b.n	8001524 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80013bc:	4b5b      	ldr	r3, [pc, #364]	; (800152c <HAL_RCC_ClockConfig+0x184>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	2201      	movs	r2, #1
 80013c2:	4013      	ands	r3, r2
 80013c4:	683a      	ldr	r2, [r7, #0]
 80013c6:	429a      	cmp	r2, r3
 80013c8:	d911      	bls.n	80013ee <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80013ca:	4b58      	ldr	r3, [pc, #352]	; (800152c <HAL_RCC_ClockConfig+0x184>)
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	2201      	movs	r2, #1
 80013d0:	4393      	bics	r3, r2
 80013d2:	0019      	movs	r1, r3
 80013d4:	4b55      	ldr	r3, [pc, #340]	; (800152c <HAL_RCC_ClockConfig+0x184>)
 80013d6:	683a      	ldr	r2, [r7, #0]
 80013d8:	430a      	orrs	r2, r1
 80013da:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80013dc:	4b53      	ldr	r3, [pc, #332]	; (800152c <HAL_RCC_ClockConfig+0x184>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	2201      	movs	r2, #1
 80013e2:	4013      	ands	r3, r2
 80013e4:	683a      	ldr	r2, [r7, #0]
 80013e6:	429a      	cmp	r2, r3
 80013e8:	d001      	beq.n	80013ee <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 80013ea:	2301      	movs	r3, #1
 80013ec:	e09a      	b.n	8001524 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	2202      	movs	r2, #2
 80013f4:	4013      	ands	r3, r2
 80013f6:	d015      	beq.n	8001424 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	2204      	movs	r2, #4
 80013fe:	4013      	ands	r3, r2
 8001400:	d006      	beq.n	8001410 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001402:	4b4b      	ldr	r3, [pc, #300]	; (8001530 <HAL_RCC_ClockConfig+0x188>)
 8001404:	685a      	ldr	r2, [r3, #4]
 8001406:	4b4a      	ldr	r3, [pc, #296]	; (8001530 <HAL_RCC_ClockConfig+0x188>)
 8001408:	21e0      	movs	r1, #224	; 0xe0
 800140a:	00c9      	lsls	r1, r1, #3
 800140c:	430a      	orrs	r2, r1
 800140e:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001410:	4b47      	ldr	r3, [pc, #284]	; (8001530 <HAL_RCC_ClockConfig+0x188>)
 8001412:	685b      	ldr	r3, [r3, #4]
 8001414:	22f0      	movs	r2, #240	; 0xf0
 8001416:	4393      	bics	r3, r2
 8001418:	0019      	movs	r1, r3
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	689a      	ldr	r2, [r3, #8]
 800141e:	4b44      	ldr	r3, [pc, #272]	; (8001530 <HAL_RCC_ClockConfig+0x188>)
 8001420:	430a      	orrs	r2, r1
 8001422:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	2201      	movs	r2, #1
 800142a:	4013      	ands	r3, r2
 800142c:	d040      	beq.n	80014b0 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	685b      	ldr	r3, [r3, #4]
 8001432:	2b01      	cmp	r3, #1
 8001434:	d107      	bne.n	8001446 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001436:	4b3e      	ldr	r3, [pc, #248]	; (8001530 <HAL_RCC_ClockConfig+0x188>)
 8001438:	681a      	ldr	r2, [r3, #0]
 800143a:	2380      	movs	r3, #128	; 0x80
 800143c:	029b      	lsls	r3, r3, #10
 800143e:	4013      	ands	r3, r2
 8001440:	d114      	bne.n	800146c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001442:	2301      	movs	r3, #1
 8001444:	e06e      	b.n	8001524 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	685b      	ldr	r3, [r3, #4]
 800144a:	2b02      	cmp	r3, #2
 800144c:	d107      	bne.n	800145e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800144e:	4b38      	ldr	r3, [pc, #224]	; (8001530 <HAL_RCC_ClockConfig+0x188>)
 8001450:	681a      	ldr	r2, [r3, #0]
 8001452:	2380      	movs	r3, #128	; 0x80
 8001454:	049b      	lsls	r3, r3, #18
 8001456:	4013      	ands	r3, r2
 8001458:	d108      	bne.n	800146c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800145a:	2301      	movs	r3, #1
 800145c:	e062      	b.n	8001524 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800145e:	4b34      	ldr	r3, [pc, #208]	; (8001530 <HAL_RCC_ClockConfig+0x188>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	2202      	movs	r2, #2
 8001464:	4013      	ands	r3, r2
 8001466:	d101      	bne.n	800146c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001468:	2301      	movs	r3, #1
 800146a:	e05b      	b.n	8001524 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800146c:	4b30      	ldr	r3, [pc, #192]	; (8001530 <HAL_RCC_ClockConfig+0x188>)
 800146e:	685b      	ldr	r3, [r3, #4]
 8001470:	2203      	movs	r2, #3
 8001472:	4393      	bics	r3, r2
 8001474:	0019      	movs	r1, r3
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	685a      	ldr	r2, [r3, #4]
 800147a:	4b2d      	ldr	r3, [pc, #180]	; (8001530 <HAL_RCC_ClockConfig+0x188>)
 800147c:	430a      	orrs	r2, r1
 800147e:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001480:	f7ff f994 	bl	80007ac <HAL_GetTick>
 8001484:	0003      	movs	r3, r0
 8001486:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001488:	e009      	b.n	800149e <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800148a:	f7ff f98f 	bl	80007ac <HAL_GetTick>
 800148e:	0002      	movs	r2, r0
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	1ad3      	subs	r3, r2, r3
 8001494:	4a27      	ldr	r2, [pc, #156]	; (8001534 <HAL_RCC_ClockConfig+0x18c>)
 8001496:	4293      	cmp	r3, r2
 8001498:	d901      	bls.n	800149e <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 800149a:	2303      	movs	r3, #3
 800149c:	e042      	b.n	8001524 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800149e:	4b24      	ldr	r3, [pc, #144]	; (8001530 <HAL_RCC_ClockConfig+0x188>)
 80014a0:	685b      	ldr	r3, [r3, #4]
 80014a2:	220c      	movs	r2, #12
 80014a4:	401a      	ands	r2, r3
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	685b      	ldr	r3, [r3, #4]
 80014aa:	009b      	lsls	r3, r3, #2
 80014ac:	429a      	cmp	r2, r3
 80014ae:	d1ec      	bne.n	800148a <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80014b0:	4b1e      	ldr	r3, [pc, #120]	; (800152c <HAL_RCC_ClockConfig+0x184>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	2201      	movs	r2, #1
 80014b6:	4013      	ands	r3, r2
 80014b8:	683a      	ldr	r2, [r7, #0]
 80014ba:	429a      	cmp	r2, r3
 80014bc:	d211      	bcs.n	80014e2 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014be:	4b1b      	ldr	r3, [pc, #108]	; (800152c <HAL_RCC_ClockConfig+0x184>)
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	2201      	movs	r2, #1
 80014c4:	4393      	bics	r3, r2
 80014c6:	0019      	movs	r1, r3
 80014c8:	4b18      	ldr	r3, [pc, #96]	; (800152c <HAL_RCC_ClockConfig+0x184>)
 80014ca:	683a      	ldr	r2, [r7, #0]
 80014cc:	430a      	orrs	r2, r1
 80014ce:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80014d0:	4b16      	ldr	r3, [pc, #88]	; (800152c <HAL_RCC_ClockConfig+0x184>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	2201      	movs	r2, #1
 80014d6:	4013      	ands	r3, r2
 80014d8:	683a      	ldr	r2, [r7, #0]
 80014da:	429a      	cmp	r2, r3
 80014dc:	d001      	beq.n	80014e2 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 80014de:	2301      	movs	r3, #1
 80014e0:	e020      	b.n	8001524 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	2204      	movs	r2, #4
 80014e8:	4013      	ands	r3, r2
 80014ea:	d009      	beq.n	8001500 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80014ec:	4b10      	ldr	r3, [pc, #64]	; (8001530 <HAL_RCC_ClockConfig+0x188>)
 80014ee:	685b      	ldr	r3, [r3, #4]
 80014f0:	4a11      	ldr	r2, [pc, #68]	; (8001538 <HAL_RCC_ClockConfig+0x190>)
 80014f2:	4013      	ands	r3, r2
 80014f4:	0019      	movs	r1, r3
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	68da      	ldr	r2, [r3, #12]
 80014fa:	4b0d      	ldr	r3, [pc, #52]	; (8001530 <HAL_RCC_ClockConfig+0x188>)
 80014fc:	430a      	orrs	r2, r1
 80014fe:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001500:	f000 f820 	bl	8001544 <HAL_RCC_GetSysClockFreq>
 8001504:	0001      	movs	r1, r0
 8001506:	4b0a      	ldr	r3, [pc, #40]	; (8001530 <HAL_RCC_ClockConfig+0x188>)
 8001508:	685b      	ldr	r3, [r3, #4]
 800150a:	091b      	lsrs	r3, r3, #4
 800150c:	220f      	movs	r2, #15
 800150e:	4013      	ands	r3, r2
 8001510:	4a0a      	ldr	r2, [pc, #40]	; (800153c <HAL_RCC_ClockConfig+0x194>)
 8001512:	5cd3      	ldrb	r3, [r2, r3]
 8001514:	000a      	movs	r2, r1
 8001516:	40da      	lsrs	r2, r3
 8001518:	4b09      	ldr	r3, [pc, #36]	; (8001540 <HAL_RCC_ClockConfig+0x198>)
 800151a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 800151c:	2000      	movs	r0, #0
 800151e:	f7ff f8ff 	bl	8000720 <HAL_InitTick>
  
  return HAL_OK;
 8001522:	2300      	movs	r3, #0
}
 8001524:	0018      	movs	r0, r3
 8001526:	46bd      	mov	sp, r7
 8001528:	b004      	add	sp, #16
 800152a:	bd80      	pop	{r7, pc}
 800152c:	40022000 	.word	0x40022000
 8001530:	40021000 	.word	0x40021000
 8001534:	00001388 	.word	0x00001388
 8001538:	fffff8ff 	.word	0xfffff8ff
 800153c:	08002154 	.word	0x08002154
 8001540:	20000000 	.word	0x20000000

08001544 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001544:	b590      	push	{r4, r7, lr}
 8001546:	b08f      	sub	sp, #60	; 0x3c
 8001548:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 800154a:	2314      	movs	r3, #20
 800154c:	18fb      	adds	r3, r7, r3
 800154e:	4a2a      	ldr	r2, [pc, #168]	; (80015f8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001550:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001552:	c313      	stmia	r3!, {r0, r1, r4}
 8001554:	6812      	ldr	r2, [r2, #0]
 8001556:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8001558:	1d3b      	adds	r3, r7, #4
 800155a:	4a28      	ldr	r2, [pc, #160]	; (80015fc <HAL_RCC_GetSysClockFreq+0xb8>)
 800155c:	ca13      	ldmia	r2!, {r0, r1, r4}
 800155e:	c313      	stmia	r3!, {r0, r1, r4}
 8001560:	6812      	ldr	r2, [r2, #0]
 8001562:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001564:	2300      	movs	r3, #0
 8001566:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001568:	2300      	movs	r3, #0
 800156a:	62bb      	str	r3, [r7, #40]	; 0x28
 800156c:	2300      	movs	r3, #0
 800156e:	637b      	str	r3, [r7, #52]	; 0x34
 8001570:	2300      	movs	r3, #0
 8001572:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8001574:	2300      	movs	r3, #0
 8001576:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8001578:	4b21      	ldr	r3, [pc, #132]	; (8001600 <HAL_RCC_GetSysClockFreq+0xbc>)
 800157a:	685b      	ldr	r3, [r3, #4]
 800157c:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800157e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001580:	220c      	movs	r2, #12
 8001582:	4013      	ands	r3, r2
 8001584:	2b04      	cmp	r3, #4
 8001586:	d002      	beq.n	800158e <HAL_RCC_GetSysClockFreq+0x4a>
 8001588:	2b08      	cmp	r3, #8
 800158a:	d003      	beq.n	8001594 <HAL_RCC_GetSysClockFreq+0x50>
 800158c:	e02c      	b.n	80015e8 <HAL_RCC_GetSysClockFreq+0xa4>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800158e:	4b1d      	ldr	r3, [pc, #116]	; (8001604 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001590:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001592:	e02c      	b.n	80015ee <HAL_RCC_GetSysClockFreq+0xaa>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001594:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001596:	0c9b      	lsrs	r3, r3, #18
 8001598:	220f      	movs	r2, #15
 800159a:	4013      	ands	r3, r2
 800159c:	2214      	movs	r2, #20
 800159e:	18ba      	adds	r2, r7, r2
 80015a0:	5cd3      	ldrb	r3, [r2, r3]
 80015a2:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80015a4:	4b16      	ldr	r3, [pc, #88]	; (8001600 <HAL_RCC_GetSysClockFreq+0xbc>)
 80015a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015a8:	220f      	movs	r2, #15
 80015aa:	4013      	ands	r3, r2
 80015ac:	1d3a      	adds	r2, r7, #4
 80015ae:	5cd3      	ldrb	r3, [r2, r3]
 80015b0:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80015b2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80015b4:	2380      	movs	r3, #128	; 0x80
 80015b6:	025b      	lsls	r3, r3, #9
 80015b8:	4013      	ands	r3, r2
 80015ba:	d009      	beq.n	80015d0 <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80015bc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80015be:	4811      	ldr	r0, [pc, #68]	; (8001604 <HAL_RCC_GetSysClockFreq+0xc0>)
 80015c0:	f7fe fda0 	bl	8000104 <__udivsi3>
 80015c4:	0003      	movs	r3, r0
 80015c6:	001a      	movs	r2, r3
 80015c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015ca:	4353      	muls	r3, r2
 80015cc:	637b      	str	r3, [r7, #52]	; 0x34
 80015ce:	e008      	b.n	80015e2 <HAL_RCC_GetSysClockFreq+0x9e>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80015d0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80015d2:	480c      	ldr	r0, [pc, #48]	; (8001604 <HAL_RCC_GetSysClockFreq+0xc0>)
 80015d4:	f7fe fd96 	bl	8000104 <__udivsi3>
 80015d8:	0003      	movs	r3, r0
 80015da:	001a      	movs	r2, r3
 80015dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015de:	4353      	muls	r3, r2
 80015e0:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 80015e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80015e4:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80015e6:	e002      	b.n	80015ee <HAL_RCC_GetSysClockFreq+0xaa>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80015e8:	4b06      	ldr	r3, [pc, #24]	; (8001604 <HAL_RCC_GetSysClockFreq+0xc0>)
 80015ea:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80015ec:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80015ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80015f0:	0018      	movs	r0, r3
 80015f2:	46bd      	mov	sp, r7
 80015f4:	b00f      	add	sp, #60	; 0x3c
 80015f6:	bd90      	pop	{r4, r7, pc}
 80015f8:	08002134 	.word	0x08002134
 80015fc:	08002144 	.word	0x08002144
 8001600:	40021000 	.word	0x40021000
 8001604:	007a1200 	.word	0x007a1200

08001608 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b084      	sub	sp, #16
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	2b00      	cmp	r3, #0
 8001614:	d101      	bne.n	800161a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001616:	2301      	movs	r3, #1
 8001618:	e0a8      	b.n	800176c <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800161e:	2b00      	cmp	r3, #0
 8001620:	d109      	bne.n	8001636 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	685a      	ldr	r2, [r3, #4]
 8001626:	2382      	movs	r3, #130	; 0x82
 8001628:	005b      	lsls	r3, r3, #1
 800162a:	429a      	cmp	r2, r3
 800162c:	d009      	beq.n	8001642 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	2200      	movs	r2, #0
 8001632:	61da      	str	r2, [r3, #28]
 8001634:	e005      	b.n	8001642 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	2200      	movs	r2, #0
 800163a:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	2200      	movs	r2, #0
 8001640:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	2200      	movs	r2, #0
 8001646:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	225d      	movs	r2, #93	; 0x5d
 800164c:	5c9b      	ldrb	r3, [r3, r2]
 800164e:	b2db      	uxtb	r3, r3
 8001650:	2b00      	cmp	r3, #0
 8001652:	d107      	bne.n	8001664 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	225c      	movs	r2, #92	; 0x5c
 8001658:	2100      	movs	r1, #0
 800165a:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	0018      	movs	r0, r3
 8001660:	f7fe ff7e 	bl	8000560 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	225d      	movs	r2, #93	; 0x5d
 8001668:	2102      	movs	r1, #2
 800166a:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	681a      	ldr	r2, [r3, #0]
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	2140      	movs	r1, #64	; 0x40
 8001678:	438a      	bics	r2, r1
 800167a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	68da      	ldr	r2, [r3, #12]
 8001680:	23e0      	movs	r3, #224	; 0xe0
 8001682:	00db      	lsls	r3, r3, #3
 8001684:	429a      	cmp	r2, r3
 8001686:	d902      	bls.n	800168e <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8001688:	2300      	movs	r3, #0
 800168a:	60fb      	str	r3, [r7, #12]
 800168c:	e002      	b.n	8001694 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800168e:	2380      	movs	r3, #128	; 0x80
 8001690:	015b      	lsls	r3, r3, #5
 8001692:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	68da      	ldr	r2, [r3, #12]
 8001698:	23f0      	movs	r3, #240	; 0xf0
 800169a:	011b      	lsls	r3, r3, #4
 800169c:	429a      	cmp	r2, r3
 800169e:	d008      	beq.n	80016b2 <HAL_SPI_Init+0xaa>
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	68da      	ldr	r2, [r3, #12]
 80016a4:	23e0      	movs	r3, #224	; 0xe0
 80016a6:	00db      	lsls	r3, r3, #3
 80016a8:	429a      	cmp	r2, r3
 80016aa:	d002      	beq.n	80016b2 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	2200      	movs	r2, #0
 80016b0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	685a      	ldr	r2, [r3, #4]
 80016b6:	2382      	movs	r3, #130	; 0x82
 80016b8:	005b      	lsls	r3, r3, #1
 80016ba:	401a      	ands	r2, r3
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	6899      	ldr	r1, [r3, #8]
 80016c0:	2384      	movs	r3, #132	; 0x84
 80016c2:	021b      	lsls	r3, r3, #8
 80016c4:	400b      	ands	r3, r1
 80016c6:	431a      	orrs	r2, r3
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	691b      	ldr	r3, [r3, #16]
 80016cc:	2102      	movs	r1, #2
 80016ce:	400b      	ands	r3, r1
 80016d0:	431a      	orrs	r2, r3
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	695b      	ldr	r3, [r3, #20]
 80016d6:	2101      	movs	r1, #1
 80016d8:	400b      	ands	r3, r1
 80016da:	431a      	orrs	r2, r3
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	6999      	ldr	r1, [r3, #24]
 80016e0:	2380      	movs	r3, #128	; 0x80
 80016e2:	009b      	lsls	r3, r3, #2
 80016e4:	400b      	ands	r3, r1
 80016e6:	431a      	orrs	r2, r3
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	69db      	ldr	r3, [r3, #28]
 80016ec:	2138      	movs	r1, #56	; 0x38
 80016ee:	400b      	ands	r3, r1
 80016f0:	431a      	orrs	r2, r3
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	6a1b      	ldr	r3, [r3, #32]
 80016f6:	2180      	movs	r1, #128	; 0x80
 80016f8:	400b      	ands	r3, r1
 80016fa:	431a      	orrs	r2, r3
 80016fc:	0011      	movs	r1, r2
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001702:	2380      	movs	r3, #128	; 0x80
 8001704:	019b      	lsls	r3, r3, #6
 8001706:	401a      	ands	r2, r3
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	430a      	orrs	r2, r1
 800170e:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	699b      	ldr	r3, [r3, #24]
 8001714:	0c1b      	lsrs	r3, r3, #16
 8001716:	2204      	movs	r2, #4
 8001718:	401a      	ands	r2, r3
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800171e:	2110      	movs	r1, #16
 8001720:	400b      	ands	r3, r1
 8001722:	431a      	orrs	r2, r3
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001728:	2108      	movs	r1, #8
 800172a:	400b      	ands	r3, r1
 800172c:	431a      	orrs	r2, r3
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	68d9      	ldr	r1, [r3, #12]
 8001732:	23f0      	movs	r3, #240	; 0xf0
 8001734:	011b      	lsls	r3, r3, #4
 8001736:	400b      	ands	r3, r1
 8001738:	431a      	orrs	r2, r3
 800173a:	0011      	movs	r1, r2
 800173c:	68fa      	ldr	r2, [r7, #12]
 800173e:	2380      	movs	r3, #128	; 0x80
 8001740:	015b      	lsls	r3, r3, #5
 8001742:	401a      	ands	r2, r3
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	430a      	orrs	r2, r1
 800174a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	69da      	ldr	r2, [r3, #28]
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	4907      	ldr	r1, [pc, #28]	; (8001774 <HAL_SPI_Init+0x16c>)
 8001758:	400a      	ands	r2, r1
 800175a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	2200      	movs	r2, #0
 8001760:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	225d      	movs	r2, #93	; 0x5d
 8001766:	2101      	movs	r1, #1
 8001768:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800176a:	2300      	movs	r3, #0
}
 800176c:	0018      	movs	r0, r3
 800176e:	46bd      	mov	sp, r7
 8001770:	b004      	add	sp, #16
 8001772:	bd80      	pop	{r7, pc}
 8001774:	fffff7ff 	.word	0xfffff7ff

08001778 <HAL_SPI_TransmitReceive_IT>:
  * @param  pRxData pointer to reception data buffer
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b086      	sub	sp, #24
 800177c:	af00      	add	r7, sp, #0
 800177e:	60f8      	str	r0, [r7, #12]
 8001780:	60b9      	str	r1, [r7, #8]
 8001782:	607a      	str	r2, [r7, #4]
 8001784:	001a      	movs	r2, r3
 8001786:	1cbb      	adds	r3, r7, #2
 8001788:	801a      	strh	r2, [r3, #0]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800178a:	2317      	movs	r3, #23
 800178c:	18fb      	adds	r3, r7, r3
 800178e:	2200      	movs	r2, #0
 8001790:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	225c      	movs	r2, #92	; 0x5c
 8001796:	5c9b      	ldrb	r3, [r3, r2]
 8001798:	2b01      	cmp	r3, #1
 800179a:	d101      	bne.n	80017a0 <HAL_SPI_TransmitReceive_IT+0x28>
 800179c:	2302      	movs	r3, #2
 800179e:	e0a6      	b.n	80018ee <HAL_SPI_TransmitReceive_IT+0x176>
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	225c      	movs	r2, #92	; 0x5c
 80017a4:	2101      	movs	r1, #1
 80017a6:	5499      	strb	r1, [r3, r2]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80017a8:	2016      	movs	r0, #22
 80017aa:	183b      	adds	r3, r7, r0
 80017ac:	68fa      	ldr	r2, [r7, #12]
 80017ae:	215d      	movs	r1, #93	; 0x5d
 80017b0:	5c52      	ldrb	r2, [r2, r1]
 80017b2:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	685b      	ldr	r3, [r3, #4]
 80017b8:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80017ba:	0001      	movs	r1, r0
 80017bc:	187b      	adds	r3, r7, r1
 80017be:	781b      	ldrb	r3, [r3, #0]
 80017c0:	2b01      	cmp	r3, #1
 80017c2:	d011      	beq.n	80017e8 <HAL_SPI_TransmitReceive_IT+0x70>
 80017c4:	693a      	ldr	r2, [r7, #16]
 80017c6:	2382      	movs	r3, #130	; 0x82
 80017c8:	005b      	lsls	r3, r3, #1
 80017ca:	429a      	cmp	r2, r3
 80017cc:	d107      	bne.n	80017de <HAL_SPI_TransmitReceive_IT+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	689b      	ldr	r3, [r3, #8]
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d103      	bne.n	80017de <HAL_SPI_TransmitReceive_IT+0x66>
 80017d6:	187b      	adds	r3, r7, r1
 80017d8:	781b      	ldrb	r3, [r3, #0]
 80017da:	2b04      	cmp	r3, #4
 80017dc:	d004      	beq.n	80017e8 <HAL_SPI_TransmitReceive_IT+0x70>
  {
    errorcode = HAL_BUSY;
 80017de:	2317      	movs	r3, #23
 80017e0:	18fb      	adds	r3, r7, r3
 80017e2:	2202      	movs	r2, #2
 80017e4:	701a      	strb	r2, [r3, #0]
    goto error;
 80017e6:	e07b      	b.n	80018e0 <HAL_SPI_TransmitReceive_IT+0x168>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80017e8:	68bb      	ldr	r3, [r7, #8]
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d006      	beq.n	80017fc <HAL_SPI_TransmitReceive_IT+0x84>
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d003      	beq.n	80017fc <HAL_SPI_TransmitReceive_IT+0x84>
 80017f4:	1cbb      	adds	r3, r7, #2
 80017f6:	881b      	ldrh	r3, [r3, #0]
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d104      	bne.n	8001806 <HAL_SPI_TransmitReceive_IT+0x8e>
  {
    errorcode = HAL_ERROR;
 80017fc:	2317      	movs	r3, #23
 80017fe:	18fb      	adds	r3, r7, r3
 8001800:	2201      	movs	r2, #1
 8001802:	701a      	strb	r2, [r3, #0]
    goto error;
 8001804:	e06c      	b.n	80018e0 <HAL_SPI_TransmitReceive_IT+0x168>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	225d      	movs	r2, #93	; 0x5d
 800180a:	5c9b      	ldrb	r3, [r3, r2]
 800180c:	b2db      	uxtb	r3, r3
 800180e:	2b04      	cmp	r3, #4
 8001810:	d003      	beq.n	800181a <HAL_SPI_TransmitReceive_IT+0xa2>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	225d      	movs	r2, #93	; 0x5d
 8001816:	2105      	movs	r1, #5
 8001818:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	2200      	movs	r2, #0
 800181e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	68ba      	ldr	r2, [r7, #8]
 8001824:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	1cba      	adds	r2, r7, #2
 800182a:	8812      	ldrh	r2, [r2, #0]
 800182c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	1cba      	adds	r2, r7, #2
 8001832:	8812      	ldrh	r2, [r2, #0]
 8001834:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	687a      	ldr	r2, [r7, #4]
 800183a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	1cba      	adds	r2, r7, #2
 8001840:	2144      	movs	r1, #68	; 0x44
 8001842:	8812      	ldrh	r2, [r2, #0]
 8001844:	525a      	strh	r2, [r3, r1]
  hspi->RxXferCount = Size;
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	1cba      	adds	r2, r7, #2
 800184a:	2146      	movs	r1, #70	; 0x46
 800184c:	8812      	ldrh	r2, [r2, #0]
 800184e:	525a      	strh	r2, [r3, r1]

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	68da      	ldr	r2, [r3, #12]
 8001854:	23e0      	movs	r3, #224	; 0xe0
 8001856:	00db      	lsls	r3, r3, #3
 8001858:	429a      	cmp	r2, r3
 800185a:	d906      	bls.n	800186a <HAL_SPI_TransmitReceive_IT+0xf2>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	4a26      	ldr	r2, [pc, #152]	; (80018f8 <HAL_SPI_TransmitReceive_IT+0x180>)
 8001860:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	4a25      	ldr	r2, [pc, #148]	; (80018fc <HAL_SPI_TransmitReceive_IT+0x184>)
 8001866:	651a      	str	r2, [r3, #80]	; 0x50
 8001868:	e005      	b.n	8001876 <HAL_SPI_TransmitReceive_IT+0xfe>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	4a24      	ldr	r2, [pc, #144]	; (8001900 <HAL_SPI_TransmitReceive_IT+0x188>)
 800186e:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	4a24      	ldr	r2, [pc, #144]	; (8001904 <HAL_SPI_TransmitReceive_IT+0x18c>)
 8001874:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->CRCSize = 0U;
  }
#endif /* USE_SPI_CRC */

  /* Check if packing mode is enabled and if there is more than 2 data to receive */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (Size >= 2U))
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	68da      	ldr	r2, [r3, #12]
 800187a:	23e0      	movs	r3, #224	; 0xe0
 800187c:	00db      	lsls	r3, r3, #3
 800187e:	429a      	cmp	r2, r3
 8001880:	d803      	bhi.n	800188a <HAL_SPI_TransmitReceive_IT+0x112>
 8001882:	1cbb      	adds	r3, r7, #2
 8001884:	881b      	ldrh	r3, [r3, #0]
 8001886:	2b01      	cmp	r3, #1
 8001888:	d908      	bls.n	800189c <HAL_SPI_TransmitReceive_IT+0x124>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	685a      	ldr	r2, [r3, #4]
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	491c      	ldr	r1, [pc, #112]	; (8001908 <HAL_SPI_TransmitReceive_IT+0x190>)
 8001896:	400a      	ands	r2, r1
 8001898:	605a      	str	r2, [r3, #4]
 800189a:	e008      	b.n	80018ae <HAL_SPI_TransmitReceive_IT+0x136>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	685a      	ldr	r2, [r3, #4]
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	2180      	movs	r1, #128	; 0x80
 80018a8:	0149      	lsls	r1, r1, #5
 80018aa:	430a      	orrs	r2, r1
 80018ac:	605a      	str	r2, [r3, #4]
  }

  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	685a      	ldr	r2, [r3, #4]
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	21e0      	movs	r1, #224	; 0xe0
 80018ba:	430a      	orrs	r2, r1
 80018bc:	605a      	str	r2, [r3, #4]

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	2240      	movs	r2, #64	; 0x40
 80018c6:	4013      	ands	r3, r2
 80018c8:	2b40      	cmp	r3, #64	; 0x40
 80018ca:	d008      	beq.n	80018de <HAL_SPI_TransmitReceive_IT+0x166>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	681a      	ldr	r2, [r3, #0]
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	2140      	movs	r1, #64	; 0x40
 80018d8:	430a      	orrs	r2, r1
 80018da:	601a      	str	r2, [r3, #0]
 80018dc:	e000      	b.n	80018e0 <HAL_SPI_TransmitReceive_IT+0x168>
  }

error :
 80018de:	46c0      	nop			; (mov r8, r8)
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	225c      	movs	r2, #92	; 0x5c
 80018e4:	2100      	movs	r1, #0
 80018e6:	5499      	strb	r1, [r3, r2]
  return errorcode;
 80018e8:	2317      	movs	r3, #23
 80018ea:	18fb      	adds	r3, r7, r3
 80018ec:	781b      	ldrb	r3, [r3, #0]
}
 80018ee:	0018      	movs	r0, r3
 80018f0:	46bd      	mov	sp, r7
 80018f2:	b006      	add	sp, #24
 80018f4:	bd80      	pop	{r7, pc}
 80018f6:	46c0      	nop			; (mov r8, r8)
 80018f8:	08001c9b 	.word	0x08001c9b
 80018fc:	08001d03 	.word	0x08001d03
 8001900:	08001b45 	.word	0x08001b45
 8001904:	08001c07 	.word	0x08001c07
 8001908:	ffffefff 	.word	0xffffefff

0800190c <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b088      	sub	sp, #32
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	685b      	ldr	r3, [r3, #4]
 800191a:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	689b      	ldr	r3, [r3, #8]
 8001922:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8001924:	69bb      	ldr	r3, [r7, #24]
 8001926:	099b      	lsrs	r3, r3, #6
 8001928:	001a      	movs	r2, r3
 800192a:	2301      	movs	r3, #1
 800192c:	4013      	ands	r3, r2
 800192e:	d10f      	bne.n	8001950 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8001930:	69bb      	ldr	r3, [r7, #24]
 8001932:	2201      	movs	r2, #1
 8001934:	4013      	ands	r3, r2
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8001936:	d00b      	beq.n	8001950 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8001938:	69fb      	ldr	r3, [r7, #28]
 800193a:	099b      	lsrs	r3, r3, #6
 800193c:	001a      	movs	r2, r3
 800193e:	2301      	movs	r3, #1
 8001940:	4013      	ands	r3, r2
 8001942:	d005      	beq.n	8001950 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001948:	687a      	ldr	r2, [r7, #4]
 800194a:	0010      	movs	r0, r2
 800194c:	4798      	blx	r3
    return;
 800194e:	e0d5      	b.n	8001afc <HAL_SPI_IRQHandler+0x1f0>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8001950:	69bb      	ldr	r3, [r7, #24]
 8001952:	085b      	lsrs	r3, r3, #1
 8001954:	001a      	movs	r2, r3
 8001956:	2301      	movs	r3, #1
 8001958:	4013      	ands	r3, r2
 800195a:	d00b      	beq.n	8001974 <HAL_SPI_IRQHandler+0x68>
 800195c:	69fb      	ldr	r3, [r7, #28]
 800195e:	09db      	lsrs	r3, r3, #7
 8001960:	001a      	movs	r2, r3
 8001962:	2301      	movs	r3, #1
 8001964:	4013      	ands	r3, r2
 8001966:	d005      	beq.n	8001974 <HAL_SPI_IRQHandler+0x68>
  {
    hspi->TxISR(hspi);
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800196c:	687a      	ldr	r2, [r7, #4]
 800196e:	0010      	movs	r0, r2
 8001970:	4798      	blx	r3
    return;
 8001972:	e0c3      	b.n	8001afc <HAL_SPI_IRQHandler+0x1f0>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8001974:	69bb      	ldr	r3, [r7, #24]
 8001976:	095b      	lsrs	r3, r3, #5
 8001978:	001a      	movs	r2, r3
 800197a:	2301      	movs	r3, #1
 800197c:	4013      	ands	r3, r2
 800197e:	d10c      	bne.n	800199a <HAL_SPI_IRQHandler+0x8e>
 8001980:	69bb      	ldr	r3, [r7, #24]
 8001982:	099b      	lsrs	r3, r3, #6
 8001984:	001a      	movs	r2, r3
 8001986:	2301      	movs	r3, #1
 8001988:	4013      	ands	r3, r2
 800198a:	d106      	bne.n	800199a <HAL_SPI_IRQHandler+0x8e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800198c:	69bb      	ldr	r3, [r7, #24]
 800198e:	0a1b      	lsrs	r3, r3, #8
 8001990:	001a      	movs	r2, r3
 8001992:	2301      	movs	r3, #1
 8001994:	4013      	ands	r3, r2
 8001996:	d100      	bne.n	800199a <HAL_SPI_IRQHandler+0x8e>
 8001998:	e0b0      	b.n	8001afc <HAL_SPI_IRQHandler+0x1f0>
 800199a:	69fb      	ldr	r3, [r7, #28]
 800199c:	095b      	lsrs	r3, r3, #5
 800199e:	001a      	movs	r2, r3
 80019a0:	2301      	movs	r3, #1
 80019a2:	4013      	ands	r3, r2
 80019a4:	d100      	bne.n	80019a8 <HAL_SPI_IRQHandler+0x9c>
 80019a6:	e0a9      	b.n	8001afc <HAL_SPI_IRQHandler+0x1f0>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80019a8:	69bb      	ldr	r3, [r7, #24]
 80019aa:	099b      	lsrs	r3, r3, #6
 80019ac:	001a      	movs	r2, r3
 80019ae:	2301      	movs	r3, #1
 80019b0:	4013      	ands	r3, r2
 80019b2:	d023      	beq.n	80019fc <HAL_SPI_IRQHandler+0xf0>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	225d      	movs	r2, #93	; 0x5d
 80019b8:	5c9b      	ldrb	r3, [r3, r2]
 80019ba:	b2db      	uxtb	r3, r3
 80019bc:	2b03      	cmp	r3, #3
 80019be:	d011      	beq.n	80019e4 <HAL_SPI_IRQHandler+0xd8>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019c4:	2204      	movs	r2, #4
 80019c6:	431a      	orrs	r2, r3
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80019cc:	2300      	movs	r3, #0
 80019ce:	617b      	str	r3, [r7, #20]
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	68db      	ldr	r3, [r3, #12]
 80019d6:	617b      	str	r3, [r7, #20]
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	689b      	ldr	r3, [r3, #8]
 80019de:	617b      	str	r3, [r7, #20]
 80019e0:	697b      	ldr	r3, [r7, #20]
 80019e2:	e00b      	b.n	80019fc <HAL_SPI_IRQHandler+0xf0>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80019e4:	2300      	movs	r3, #0
 80019e6:	613b      	str	r3, [r7, #16]
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	68db      	ldr	r3, [r3, #12]
 80019ee:	613b      	str	r3, [r7, #16]
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	689b      	ldr	r3, [r3, #8]
 80019f6:	613b      	str	r3, [r7, #16]
 80019f8:	693b      	ldr	r3, [r7, #16]
        return;
 80019fa:	e07f      	b.n	8001afc <HAL_SPI_IRQHandler+0x1f0>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80019fc:	69bb      	ldr	r3, [r7, #24]
 80019fe:	095b      	lsrs	r3, r3, #5
 8001a00:	001a      	movs	r2, r3
 8001a02:	2301      	movs	r3, #1
 8001a04:	4013      	ands	r3, r2
 8001a06:	d014      	beq.n	8001a32 <HAL_SPI_IRQHandler+0x126>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a0c:	2201      	movs	r2, #1
 8001a0e:	431a      	orrs	r2, r3
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8001a14:	2300      	movs	r3, #0
 8001a16:	60fb      	str	r3, [r7, #12]
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	689b      	ldr	r3, [r3, #8]
 8001a1e:	60fb      	str	r3, [r7, #12]
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	681a      	ldr	r2, [r3, #0]
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	2140      	movs	r1, #64	; 0x40
 8001a2c:	438a      	bics	r2, r1
 8001a2e:	601a      	str	r2, [r3, #0]
 8001a30:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8001a32:	69bb      	ldr	r3, [r7, #24]
 8001a34:	0a1b      	lsrs	r3, r3, #8
 8001a36:	001a      	movs	r2, r3
 8001a38:	2301      	movs	r3, #1
 8001a3a:	4013      	ands	r3, r2
 8001a3c:	d00c      	beq.n	8001a58 <HAL_SPI_IRQHandler+0x14c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a42:	2208      	movs	r2, #8
 8001a44:	431a      	orrs	r2, r3
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	60bb      	str	r3, [r7, #8]
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	689b      	ldr	r3, [r3, #8]
 8001a54:	60bb      	str	r3, [r7, #8]
 8001a56:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d04c      	beq.n	8001afa <HAL_SPI_IRQHandler+0x1ee>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	685a      	ldr	r2, [r3, #4]
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	21e0      	movs	r1, #224	; 0xe0
 8001a6c:	438a      	bics	r2, r1
 8001a6e:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	225d      	movs	r2, #93	; 0x5d
 8001a74:	2101      	movs	r1, #1
 8001a76:	5499      	strb	r1, [r3, r2]
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8001a78:	69fb      	ldr	r3, [r7, #28]
 8001a7a:	2202      	movs	r2, #2
 8001a7c:	4013      	ands	r3, r2
 8001a7e:	d103      	bne.n	8001a88 <HAL_SPI_IRQHandler+0x17c>
 8001a80:	69fb      	ldr	r3, [r7, #28]
 8001a82:	2201      	movs	r2, #1
 8001a84:	4013      	ands	r3, r2
 8001a86:	d032      	beq.n	8001aee <HAL_SPI_IRQHandler+0x1e2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	685a      	ldr	r2, [r3, #4]
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	2103      	movs	r1, #3
 8001a94:	438a      	bics	r2, r1
 8001a96:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d010      	beq.n	8001ac2 <HAL_SPI_IRQHandler+0x1b6>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001aa4:	4a17      	ldr	r2, [pc, #92]	; (8001b04 <HAL_SPI_IRQHandler+0x1f8>)
 8001aa6:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001aac:	0018      	movs	r0, r3
 8001aae:	f7fe ff89 	bl	80009c4 <HAL_DMA_Abort_IT>
 8001ab2:	1e03      	subs	r3, r0, #0
 8001ab4:	d005      	beq.n	8001ac2 <HAL_SPI_IRQHandler+0x1b6>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001aba:	2240      	movs	r2, #64	; 0x40
 8001abc:	431a      	orrs	r2, r3
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d016      	beq.n	8001af8 <HAL_SPI_IRQHandler+0x1ec>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ace:	4a0d      	ldr	r2, [pc, #52]	; (8001b04 <HAL_SPI_IRQHandler+0x1f8>)
 8001ad0:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ad6:	0018      	movs	r0, r3
 8001ad8:	f7fe ff74 	bl	80009c4 <HAL_DMA_Abort_IT>
 8001adc:	1e03      	subs	r3, r0, #0
 8001ade:	d00b      	beq.n	8001af8 <HAL_SPI_IRQHandler+0x1ec>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ae4:	2240      	movs	r2, #64	; 0x40
 8001ae6:	431a      	orrs	r2, r3
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 8001aec:	e004      	b.n	8001af8 <HAL_SPI_IRQHandler+0x1ec>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	0018      	movs	r0, r3
 8001af2:	f000 f809 	bl	8001b08 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8001af6:	e000      	b.n	8001afa <HAL_SPI_IRQHandler+0x1ee>
        if (hspi->hdmatx != NULL)
 8001af8:	46c0      	nop			; (mov r8, r8)
    return;
 8001afa:	46c0      	nop			; (mov r8, r8)
  }
}
 8001afc:	46bd      	mov	sp, r7
 8001afe:	b008      	add	sp, #32
 8001b00:	bd80      	pop	{r7, pc}
 8001b02:	46c0      	nop			; (mov r8, r8)
 8001b04:	08001b19 	.word	0x08001b19

08001b08 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b082      	sub	sp, #8
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8001b10:	46c0      	nop			; (mov r8, r8)
 8001b12:	46bd      	mov	sp, r7
 8001b14:	b002      	add	sp, #8
 8001b16:	bd80      	pop	{r7, pc}

08001b18 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b084      	sub	sp, #16
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b24:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	2246      	movs	r2, #70	; 0x46
 8001b2a:	2100      	movs	r1, #0
 8001b2c:	5299      	strh	r1, [r3, r2]
  hspi->TxXferCount = 0U;
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	2200      	movs	r2, #0
 8001b32:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	0018      	movs	r0, r3
 8001b38:	f7ff ffe6 	bl	8001b08 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8001b3c:	46c0      	nop			; (mov r8, r8)
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	b004      	add	sp, #16
 8001b42:	bd80      	pop	{r7, pc}

08001b44 <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b082      	sub	sp, #8
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
  /* Receive data in packing mode */
  if (hspi->RxXferCount > 1U)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	2246      	movs	r2, #70	; 0x46
 8001b50:	5a9b      	ldrh	r3, [r3, r2]
 8001b52:	b29b      	uxth	r3, r3
 8001b54:	2b01      	cmp	r3, #1
 8001b56:	d924      	bls.n	8001ba2 <SPI_2linesRxISR_8BIT+0x5e>
  {
    *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	68da      	ldr	r2, [r3, #12]
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b62:	b292      	uxth	r2, r2
 8001b64:	801a      	strh	r2, [r3, #0]
    hspi->pRxBuffPtr += sizeof(uint16_t);
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b6a:	1c9a      	adds	r2, r3, #2
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount -= 2U;
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	2246      	movs	r2, #70	; 0x46
 8001b74:	5a9b      	ldrh	r3, [r3, r2]
 8001b76:	b29b      	uxth	r3, r3
 8001b78:	3b02      	subs	r3, #2
 8001b7a:	b299      	uxth	r1, r3
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	2246      	movs	r2, #70	; 0x46
 8001b80:	5299      	strh	r1, [r3, r2]
    if (hspi->RxXferCount == 1U)
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	2246      	movs	r2, #70	; 0x46
 8001b86:	5a9b      	ldrh	r3, [r3, r2]
 8001b88:	b29b      	uxth	r3, r3
 8001b8a:	2b01      	cmp	r3, #1
 8001b8c:	d120      	bne.n	8001bd0 <SPI_2linesRxISR_8BIT+0x8c>
    {
      /* Set RX Fifo threshold according the reception data length: 8bit */
      SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	685a      	ldr	r2, [r3, #4]
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	2180      	movs	r1, #128	; 0x80
 8001b9a:	0149      	lsls	r1, r1, #5
 8001b9c:	430a      	orrs	r2, r1
 8001b9e:	605a      	str	r2, [r3, #4]
 8001ba0:	e016      	b.n	8001bd0 <SPI_2linesRxISR_8BIT+0x8c>
    }
  }
  /* Receive data in 8 Bit mode */
  else
  {
    *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	330c      	adds	r3, #12
 8001ba8:	001a      	movs	r2, r3
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bae:	7812      	ldrb	r2, [r2, #0]
 8001bb0:	b2d2      	uxtb	r2, r2
 8001bb2:	701a      	strb	r2, [r3, #0]
    hspi->pRxBuffPtr++;
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bb8:	1c5a      	adds	r2, r3, #1
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount--;
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	2246      	movs	r2, #70	; 0x46
 8001bc2:	5a9b      	ldrh	r3, [r3, r2]
 8001bc4:	b29b      	uxth	r3, r3
 8001bc6:	3b01      	subs	r3, #1
 8001bc8:	b299      	uxth	r1, r3
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	2246      	movs	r2, #70	; 0x46
 8001bce:	5299      	strh	r1, [r3, r2]
  }

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	2246      	movs	r2, #70	; 0x46
 8001bd4:	5a9b      	ldrh	r3, [r3, r2]
 8001bd6:	b29b      	uxth	r3, r3
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d110      	bne.n	8001bfe <SPI_2linesRxISR_8BIT+0xba>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	685a      	ldr	r2, [r3, #4]
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	2160      	movs	r1, #96	; 0x60
 8001be8:	438a      	bics	r2, r1
 8001bea:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001bf0:	b29b      	uxth	r3, r3
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d103      	bne.n	8001bfe <SPI_2linesRxISR_8BIT+0xba>
    {
      SPI_CloseRxTx_ISR(hspi);
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	0018      	movs	r0, r3
 8001bfa:	f000 fa1d 	bl	8002038 <SPI_CloseRxTx_ISR>
    }
  }
}
 8001bfe:	46c0      	nop			; (mov r8, r8)
 8001c00:	46bd      	mov	sp, r7
 8001c02:	b002      	add	sp, #8
 8001c04:	bd80      	pop	{r7, pc}

08001c06 <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8001c06:	b580      	push	{r7, lr}
 8001c08:	b082      	sub	sp, #8
 8001c0a:	af00      	add	r7, sp, #0
 8001c0c:	6078      	str	r0, [r7, #4]
  /* Transmit data in packing Bit mode */
  if (hspi->TxXferCount >= 2U)
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001c12:	b29b      	uxth	r3, r3
 8001c14:	2b01      	cmp	r3, #1
 8001c16:	d912      	bls.n	8001c3e <SPI_2linesTxISR_8BIT+0x38>
  {
    hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c1c:	881a      	ldrh	r2, [r3, #0]
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	60da      	str	r2, [r3, #12]
    hspi->pTxBuffPtr += sizeof(uint16_t);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c28:	1c9a      	adds	r2, r3, #2
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount -= 2U;
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001c32:	b29b      	uxth	r3, r3
 8001c34:	3b02      	subs	r3, #2
 8001c36:	b29a      	uxth	r2, r3
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8001c3c:	e012      	b.n	8001c64 <SPI_2linesTxISR_8BIT+0x5e>
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	330c      	adds	r3, #12
 8001c48:	7812      	ldrb	r2, [r2, #0]
 8001c4a:	701a      	strb	r2, [r3, #0]
    hspi->pTxBuffPtr++;
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c50:	1c5a      	adds	r2, r3, #1
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount--;
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001c5a:	b29b      	uxth	r3, r3
 8001c5c:	3b01      	subs	r3, #1
 8001c5e:	b29a      	uxth	r2, r3
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	87da      	strh	r2, [r3, #62]	; 0x3e
  }

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001c68:	b29b      	uxth	r3, r3
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d111      	bne.n	8001c92 <SPI_2linesTxISR_8BIT+0x8c>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	685a      	ldr	r2, [r3, #4]
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	2180      	movs	r1, #128	; 0x80
 8001c7a:	438a      	bics	r2, r1
 8001c7c:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	2246      	movs	r2, #70	; 0x46
 8001c82:	5a9b      	ldrh	r3, [r3, r2]
 8001c84:	b29b      	uxth	r3, r3
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d103      	bne.n	8001c92 <SPI_2linesTxISR_8BIT+0x8c>
    {
      SPI_CloseRxTx_ISR(hspi);
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	0018      	movs	r0, r3
 8001c8e:	f000 f9d3 	bl	8002038 <SPI_CloseRxTx_ISR>
    }
  }
}
 8001c92:	46c0      	nop			; (mov r8, r8)
 8001c94:	46bd      	mov	sp, r7
 8001c96:	b002      	add	sp, #8
 8001c98:	bd80      	pop	{r7, pc}

08001c9a <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8001c9a:	b580      	push	{r7, lr}
 8001c9c:	b082      	sub	sp, #8
 8001c9e:	af00      	add	r7, sp, #0
 8001ca0:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	68da      	ldr	r2, [r3, #12]
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cac:	b292      	uxth	r2, r2
 8001cae:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cb4:	1c9a      	adds	r2, r3, #2
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	2246      	movs	r2, #70	; 0x46
 8001cbe:	5a9b      	ldrh	r3, [r3, r2]
 8001cc0:	b29b      	uxth	r3, r3
 8001cc2:	3b01      	subs	r3, #1
 8001cc4:	b299      	uxth	r1, r3
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	2246      	movs	r2, #70	; 0x46
 8001cca:	5299      	strh	r1, [r3, r2]

  if (hspi->RxXferCount == 0U)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	2246      	movs	r2, #70	; 0x46
 8001cd0:	5a9b      	ldrh	r3, [r3, r2]
 8001cd2:	b29b      	uxth	r3, r3
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d110      	bne.n	8001cfa <SPI_2linesRxISR_16BIT+0x60>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	685a      	ldr	r2, [r3, #4]
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	2140      	movs	r1, #64	; 0x40
 8001ce4:	438a      	bics	r2, r1
 8001ce6:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001cec:	b29b      	uxth	r3, r3
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d103      	bne.n	8001cfa <SPI_2linesRxISR_16BIT+0x60>
    {
      SPI_CloseRxTx_ISR(hspi);
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	0018      	movs	r0, r3
 8001cf6:	f000 f99f 	bl	8002038 <SPI_CloseRxTx_ISR>
    }
  }
}
 8001cfa:	46c0      	nop			; (mov r8, r8)
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	b002      	add	sp, #8
 8001d00:	bd80      	pop	{r7, pc}

08001d02 <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8001d02:	b580      	push	{r7, lr}
 8001d04:	b082      	sub	sp, #8
 8001d06:	af00      	add	r7, sp, #0
 8001d08:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d0e:	881a      	ldrh	r2, [r3, #0]
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d1a:	1c9a      	adds	r2, r3, #2
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001d24:	b29b      	uxth	r3, r3
 8001d26:	3b01      	subs	r3, #1
 8001d28:	b29a      	uxth	r2, r3
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001d32:	b29b      	uxth	r3, r3
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d111      	bne.n	8001d5c <SPI_2linesTxISR_16BIT+0x5a>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	685a      	ldr	r2, [r3, #4]
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	2180      	movs	r1, #128	; 0x80
 8001d44:	438a      	bics	r2, r1
 8001d46:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	2246      	movs	r2, #70	; 0x46
 8001d4c:	5a9b      	ldrh	r3, [r3, r2]
 8001d4e:	b29b      	uxth	r3, r3
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d103      	bne.n	8001d5c <SPI_2linesTxISR_16BIT+0x5a>
    {
      SPI_CloseRxTx_ISR(hspi);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	0018      	movs	r0, r3
 8001d58:	f000 f96e 	bl	8002038 <SPI_CloseRxTx_ISR>
    }
  }
}
 8001d5c:	46c0      	nop			; (mov r8, r8)
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	b002      	add	sp, #8
 8001d62:	bd80      	pop	{r7, pc}

08001d64 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b088      	sub	sp, #32
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	60f8      	str	r0, [r7, #12]
 8001d6c:	60b9      	str	r1, [r7, #8]
 8001d6e:	603b      	str	r3, [r7, #0]
 8001d70:	1dfb      	adds	r3, r7, #7
 8001d72:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8001d74:	f7fe fd1a 	bl	80007ac <HAL_GetTick>
 8001d78:	0002      	movs	r2, r0
 8001d7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d7c:	1a9b      	subs	r3, r3, r2
 8001d7e:	683a      	ldr	r2, [r7, #0]
 8001d80:	18d3      	adds	r3, r2, r3
 8001d82:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8001d84:	f7fe fd12 	bl	80007ac <HAL_GetTick>
 8001d88:	0003      	movs	r3, r0
 8001d8a:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8001d8c:	4b3a      	ldr	r3, [pc, #232]	; (8001e78 <SPI_WaitFlagStateUntilTimeout+0x114>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	015b      	lsls	r3, r3, #5
 8001d92:	0d1b      	lsrs	r3, r3, #20
 8001d94:	69fa      	ldr	r2, [r7, #28]
 8001d96:	4353      	muls	r3, r2
 8001d98:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001d9a:	e058      	b.n	8001e4e <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8001d9c:	683b      	ldr	r3, [r7, #0]
 8001d9e:	3301      	adds	r3, #1
 8001da0:	d055      	beq.n	8001e4e <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8001da2:	f7fe fd03 	bl	80007ac <HAL_GetTick>
 8001da6:	0002      	movs	r2, r0
 8001da8:	69bb      	ldr	r3, [r7, #24]
 8001daa:	1ad3      	subs	r3, r2, r3
 8001dac:	69fa      	ldr	r2, [r7, #28]
 8001dae:	429a      	cmp	r2, r3
 8001db0:	d902      	bls.n	8001db8 <SPI_WaitFlagStateUntilTimeout+0x54>
 8001db2:	69fb      	ldr	r3, [r7, #28]
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d142      	bne.n	8001e3e <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	685a      	ldr	r2, [r3, #4]
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	21e0      	movs	r1, #224	; 0xe0
 8001dc4:	438a      	bics	r2, r1
 8001dc6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	685a      	ldr	r2, [r3, #4]
 8001dcc:	2382      	movs	r3, #130	; 0x82
 8001dce:	005b      	lsls	r3, r3, #1
 8001dd0:	429a      	cmp	r2, r3
 8001dd2:	d113      	bne.n	8001dfc <SPI_WaitFlagStateUntilTimeout+0x98>
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	689a      	ldr	r2, [r3, #8]
 8001dd8:	2380      	movs	r3, #128	; 0x80
 8001dda:	021b      	lsls	r3, r3, #8
 8001ddc:	429a      	cmp	r2, r3
 8001dde:	d005      	beq.n	8001dec <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	689a      	ldr	r2, [r3, #8]
 8001de4:	2380      	movs	r3, #128	; 0x80
 8001de6:	00db      	lsls	r3, r3, #3
 8001de8:	429a      	cmp	r2, r3
 8001dea:	d107      	bne.n	8001dfc <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	681a      	ldr	r2, [r3, #0]
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	2140      	movs	r1, #64	; 0x40
 8001df8:	438a      	bics	r2, r1
 8001dfa:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001e00:	2380      	movs	r3, #128	; 0x80
 8001e02:	019b      	lsls	r3, r3, #6
 8001e04:	429a      	cmp	r2, r3
 8001e06:	d110      	bne.n	8001e2a <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	681a      	ldr	r2, [r3, #0]
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	491a      	ldr	r1, [pc, #104]	; (8001e7c <SPI_WaitFlagStateUntilTimeout+0x118>)
 8001e14:	400a      	ands	r2, r1
 8001e16:	601a      	str	r2, [r3, #0]
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	681a      	ldr	r2, [r3, #0]
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	2180      	movs	r1, #128	; 0x80
 8001e24:	0189      	lsls	r1, r1, #6
 8001e26:	430a      	orrs	r2, r1
 8001e28:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	225d      	movs	r2, #93	; 0x5d
 8001e2e:	2101      	movs	r1, #1
 8001e30:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	225c      	movs	r2, #92	; 0x5c
 8001e36:	2100      	movs	r1, #0
 8001e38:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8001e3a:	2303      	movs	r3, #3
 8001e3c:	e017      	b.n	8001e6e <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8001e3e:	697b      	ldr	r3, [r7, #20]
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d101      	bne.n	8001e48 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8001e44:	2300      	movs	r3, #0
 8001e46:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8001e48:	697b      	ldr	r3, [r7, #20]
 8001e4a:	3b01      	subs	r3, #1
 8001e4c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	689b      	ldr	r3, [r3, #8]
 8001e54:	68ba      	ldr	r2, [r7, #8]
 8001e56:	4013      	ands	r3, r2
 8001e58:	68ba      	ldr	r2, [r7, #8]
 8001e5a:	1ad3      	subs	r3, r2, r3
 8001e5c:	425a      	negs	r2, r3
 8001e5e:	4153      	adcs	r3, r2
 8001e60:	b2db      	uxtb	r3, r3
 8001e62:	001a      	movs	r2, r3
 8001e64:	1dfb      	adds	r3, r7, #7
 8001e66:	781b      	ldrb	r3, [r3, #0]
 8001e68:	429a      	cmp	r2, r3
 8001e6a:	d197      	bne.n	8001d9c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8001e6c:	2300      	movs	r3, #0
}
 8001e6e:	0018      	movs	r0, r3
 8001e70:	46bd      	mov	sp, r7
 8001e72:	b008      	add	sp, #32
 8001e74:	bd80      	pop	{r7, pc}
 8001e76:	46c0      	nop			; (mov r8, r8)
 8001e78:	20000000 	.word	0x20000000
 8001e7c:	ffffdfff 	.word	0xffffdfff

08001e80 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b088      	sub	sp, #32
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	60f8      	str	r0, [r7, #12]
 8001e88:	60b9      	str	r1, [r7, #8]
 8001e8a:	607a      	str	r2, [r7, #4]
 8001e8c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8001e8e:	f7fe fc8d 	bl	80007ac <HAL_GetTick>
 8001e92:	0002      	movs	r2, r0
 8001e94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e96:	1a9b      	subs	r3, r3, r2
 8001e98:	683a      	ldr	r2, [r7, #0]
 8001e9a:	18d3      	adds	r3, r2, r3
 8001e9c:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8001e9e:	f7fe fc85 	bl	80007ac <HAL_GetTick>
 8001ea2:	0003      	movs	r3, r0
 8001ea4:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8001ea6:	4b3f      	ldr	r3, [pc, #252]	; (8001fa4 <SPI_WaitFifoStateUntilTimeout+0x124>)
 8001ea8:	681a      	ldr	r2, [r3, #0]
 8001eaa:	0013      	movs	r3, r2
 8001eac:	009b      	lsls	r3, r3, #2
 8001eae:	189b      	adds	r3, r3, r2
 8001eb0:	00da      	lsls	r2, r3, #3
 8001eb2:	1ad3      	subs	r3, r2, r3
 8001eb4:	0d1b      	lsrs	r3, r3, #20
 8001eb6:	69fa      	ldr	r2, [r7, #28]
 8001eb8:	4353      	muls	r3, r2
 8001eba:	617b      	str	r3, [r7, #20]

  while ((hspi->Instance->SR & Fifo) != State)
 8001ebc:	e064      	b.n	8001f88 <SPI_WaitFifoStateUntilTimeout+0x108>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8001ebe:	68ba      	ldr	r2, [r7, #8]
 8001ec0:	23c0      	movs	r3, #192	; 0xc0
 8001ec2:	00db      	lsls	r3, r3, #3
 8001ec4:	429a      	cmp	r2, r3
 8001ec6:	d106      	bne.n	8001ed6 <SPI_WaitFifoStateUntilTimeout+0x56>
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d103      	bne.n	8001ed6 <SPI_WaitFifoStateUntilTimeout+0x56>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	330c      	adds	r3, #12
 8001ed4:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8001ed6:	683b      	ldr	r3, [r7, #0]
 8001ed8:	3301      	adds	r3, #1
 8001eda:	d055      	beq.n	8001f88 <SPI_WaitFifoStateUntilTimeout+0x108>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8001edc:	f7fe fc66 	bl	80007ac <HAL_GetTick>
 8001ee0:	0002      	movs	r2, r0
 8001ee2:	69bb      	ldr	r3, [r7, #24]
 8001ee4:	1ad3      	subs	r3, r2, r3
 8001ee6:	69fa      	ldr	r2, [r7, #28]
 8001ee8:	429a      	cmp	r2, r3
 8001eea:	d902      	bls.n	8001ef2 <SPI_WaitFifoStateUntilTimeout+0x72>
 8001eec:	69fb      	ldr	r3, [r7, #28]
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d142      	bne.n	8001f78 <SPI_WaitFifoStateUntilTimeout+0xf8>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	685a      	ldr	r2, [r3, #4]
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	21e0      	movs	r1, #224	; 0xe0
 8001efe:	438a      	bics	r2, r1
 8001f00:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	685a      	ldr	r2, [r3, #4]
 8001f06:	2382      	movs	r3, #130	; 0x82
 8001f08:	005b      	lsls	r3, r3, #1
 8001f0a:	429a      	cmp	r2, r3
 8001f0c:	d113      	bne.n	8001f36 <SPI_WaitFifoStateUntilTimeout+0xb6>
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	689a      	ldr	r2, [r3, #8]
 8001f12:	2380      	movs	r3, #128	; 0x80
 8001f14:	021b      	lsls	r3, r3, #8
 8001f16:	429a      	cmp	r2, r3
 8001f18:	d005      	beq.n	8001f26 <SPI_WaitFifoStateUntilTimeout+0xa6>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	689a      	ldr	r2, [r3, #8]
 8001f1e:	2380      	movs	r3, #128	; 0x80
 8001f20:	00db      	lsls	r3, r3, #3
 8001f22:	429a      	cmp	r2, r3
 8001f24:	d107      	bne.n	8001f36 <SPI_WaitFifoStateUntilTimeout+0xb6>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	681a      	ldr	r2, [r3, #0]
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	2140      	movs	r1, #64	; 0x40
 8001f32:	438a      	bics	r2, r1
 8001f34:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001f3a:	2380      	movs	r3, #128	; 0x80
 8001f3c:	019b      	lsls	r3, r3, #6
 8001f3e:	429a      	cmp	r2, r3
 8001f40:	d110      	bne.n	8001f64 <SPI_WaitFifoStateUntilTimeout+0xe4>
        {
          SPI_RESET_CRC(hspi);
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	681a      	ldr	r2, [r3, #0]
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	4916      	ldr	r1, [pc, #88]	; (8001fa8 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8001f4e:	400a      	ands	r2, r1
 8001f50:	601a      	str	r2, [r3, #0]
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	681a      	ldr	r2, [r3, #0]
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	2180      	movs	r1, #128	; 0x80
 8001f5e:	0189      	lsls	r1, r1, #6
 8001f60:	430a      	orrs	r2, r1
 8001f62:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	225d      	movs	r2, #93	; 0x5d
 8001f68:	2101      	movs	r1, #1
 8001f6a:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	225c      	movs	r2, #92	; 0x5c
 8001f70:	2100      	movs	r1, #0
 8001f72:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8001f74:	2303      	movs	r3, #3
 8001f76:	e010      	b.n	8001f9a <SPI_WaitFifoStateUntilTimeout+0x11a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8001f78:	697b      	ldr	r3, [r7, #20]
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d101      	bne.n	8001f82 <SPI_WaitFifoStateUntilTimeout+0x102>
      {
        tmp_timeout = 0U;
 8001f7e:	2300      	movs	r3, #0
 8001f80:	61fb      	str	r3, [r7, #28]
      }      
      count--;
 8001f82:	697b      	ldr	r3, [r7, #20]
 8001f84:	3b01      	subs	r3, #1
 8001f86:	617b      	str	r3, [r7, #20]
  while ((hspi->Instance->SR & Fifo) != State)
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	689b      	ldr	r3, [r3, #8]
 8001f8e:	68ba      	ldr	r2, [r7, #8]
 8001f90:	4013      	ands	r3, r2
 8001f92:	687a      	ldr	r2, [r7, #4]
 8001f94:	429a      	cmp	r2, r3
 8001f96:	d192      	bne.n	8001ebe <SPI_WaitFifoStateUntilTimeout+0x3e>
    }
  }

  return HAL_OK;
 8001f98:	2300      	movs	r3, #0
}
 8001f9a:	0018      	movs	r0, r3
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	b008      	add	sp, #32
 8001fa0:	bd80      	pop	{r7, pc}
 8001fa2:	46c0      	nop			; (mov r8, r8)
 8001fa4:	20000000 	.word	0x20000000
 8001fa8:	ffffdfff 	.word	0xffffdfff

08001fac <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b086      	sub	sp, #24
 8001fb0:	af02      	add	r7, sp, #8
 8001fb2:	60f8      	str	r0, [r7, #12]
 8001fb4:	60b9      	str	r1, [r7, #8]
 8001fb6:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8001fb8:	68ba      	ldr	r2, [r7, #8]
 8001fba:	23c0      	movs	r3, #192	; 0xc0
 8001fbc:	0159      	lsls	r1, r3, #5
 8001fbe:	68f8      	ldr	r0, [r7, #12]
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	9300      	str	r3, [sp, #0]
 8001fc4:	0013      	movs	r3, r2
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	f7ff ff5a 	bl	8001e80 <SPI_WaitFifoStateUntilTimeout>
 8001fcc:	1e03      	subs	r3, r0, #0
 8001fce:	d007      	beq.n	8001fe0 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001fd4:	2220      	movs	r2, #32
 8001fd6:	431a      	orrs	r2, r3
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8001fdc:	2303      	movs	r3, #3
 8001fde:	e027      	b.n	8002030 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8001fe0:	68ba      	ldr	r2, [r7, #8]
 8001fe2:	68f8      	ldr	r0, [r7, #12]
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	9300      	str	r3, [sp, #0]
 8001fe8:	0013      	movs	r3, r2
 8001fea:	2200      	movs	r2, #0
 8001fec:	2180      	movs	r1, #128	; 0x80
 8001fee:	f7ff feb9 	bl	8001d64 <SPI_WaitFlagStateUntilTimeout>
 8001ff2:	1e03      	subs	r3, r0, #0
 8001ff4:	d007      	beq.n	8002006 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ffa:	2220      	movs	r2, #32
 8001ffc:	431a      	orrs	r2, r3
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002002:	2303      	movs	r3, #3
 8002004:	e014      	b.n	8002030 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002006:	68ba      	ldr	r2, [r7, #8]
 8002008:	23c0      	movs	r3, #192	; 0xc0
 800200a:	00d9      	lsls	r1, r3, #3
 800200c:	68f8      	ldr	r0, [r7, #12]
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	9300      	str	r3, [sp, #0]
 8002012:	0013      	movs	r3, r2
 8002014:	2200      	movs	r2, #0
 8002016:	f7ff ff33 	bl	8001e80 <SPI_WaitFifoStateUntilTimeout>
 800201a:	1e03      	subs	r3, r0, #0
 800201c:	d007      	beq.n	800202e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002022:	2220      	movs	r2, #32
 8002024:	431a      	orrs	r2, r3
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800202a:	2303      	movs	r3, #3
 800202c:	e000      	b.n	8002030 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800202e:	2300      	movs	r3, #0
}
 8002030:	0018      	movs	r0, r3
 8002032:	46bd      	mov	sp, r7
 8002034:	b004      	add	sp, #16
 8002036:	bd80      	pop	{r7, pc}

08002038 <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	b084      	sub	sp, #16
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002040:	f7fe fbb4 	bl	80007ac <HAL_GetTick>
 8002044:	0003      	movs	r3, r0
 8002046:	60fb      	str	r3, [r7, #12]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	685a      	ldr	r2, [r3, #4]
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	2120      	movs	r1, #32
 8002054:	438a      	bics	r2, r1
 8002056:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8002058:	68fa      	ldr	r2, [r7, #12]
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	2164      	movs	r1, #100	; 0x64
 800205e:	0018      	movs	r0, r3
 8002060:	f7ff ffa4 	bl	8001fac <SPI_EndRxTxTransaction>
 8002064:	1e03      	subs	r3, r0, #0
 8002066:	d005      	beq.n	8002074 <SPI_CloseRxTx_ISR+0x3c>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800206c:	2220      	movs	r2, #32
 800206e:	431a      	orrs	r2, r3
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	661a      	str	r2, [r3, #96]	; 0x60
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002078:	2b00      	cmp	r3, #0
 800207a:	d117      	bne.n	80020ac <SPI_CloseRxTx_ISR+0x74>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	225d      	movs	r2, #93	; 0x5d
 8002080:	5c9b      	ldrb	r3, [r3, r2]
 8002082:	b2db      	uxtb	r3, r3
 8002084:	2b04      	cmp	r3, #4
 8002086:	d108      	bne.n	800209a <SPI_CloseRxTx_ISR+0x62>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	225d      	movs	r2, #93	; 0x5d
 800208c:	2101      	movs	r1, #1
 800208e:	5499      	strb	r1, [r3, r2]
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
#else
        HAL_SPI_RxCpltCallback(hspi);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	0018      	movs	r0, r3
 8002094:	f7fe f942 	bl	800031c <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 8002098:	e010      	b.n	80020bc <SPI_CloseRxTx_ISR+0x84>
        hspi->State = HAL_SPI_STATE_READY;
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	225d      	movs	r2, #93	; 0x5d
 800209e:	2101      	movs	r1, #1
 80020a0:	5499      	strb	r1, [r3, r2]
        HAL_SPI_TxRxCpltCallback(hspi);
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	0018      	movs	r0, r3
 80020a6:	f7fe f915 	bl	80002d4 <HAL_SPI_TxRxCpltCallback>
}
 80020aa:	e007      	b.n	80020bc <SPI_CloseRxTx_ISR+0x84>
      hspi->State = HAL_SPI_STATE_READY;
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	225d      	movs	r2, #93	; 0x5d
 80020b0:	2101      	movs	r1, #1
 80020b2:	5499      	strb	r1, [r3, r2]
      HAL_SPI_ErrorCallback(hspi);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	0018      	movs	r0, r3
 80020b8:	f7ff fd26 	bl	8001b08 <HAL_SPI_ErrorCallback>
}
 80020bc:	46c0      	nop			; (mov r8, r8)
 80020be:	46bd      	mov	sp, r7
 80020c0:	b004      	add	sp, #16
 80020c2:	bd80      	pop	{r7, pc}

080020c4 <__libc_init_array>:
 80020c4:	b570      	push	{r4, r5, r6, lr}
 80020c6:	2600      	movs	r6, #0
 80020c8:	4d0c      	ldr	r5, [pc, #48]	; (80020fc <__libc_init_array+0x38>)
 80020ca:	4c0d      	ldr	r4, [pc, #52]	; (8002100 <__libc_init_array+0x3c>)
 80020cc:	1b64      	subs	r4, r4, r5
 80020ce:	10a4      	asrs	r4, r4, #2
 80020d0:	42a6      	cmp	r6, r4
 80020d2:	d109      	bne.n	80020e8 <__libc_init_array+0x24>
 80020d4:	2600      	movs	r6, #0
 80020d6:	f000 f821 	bl	800211c <_init>
 80020da:	4d0a      	ldr	r5, [pc, #40]	; (8002104 <__libc_init_array+0x40>)
 80020dc:	4c0a      	ldr	r4, [pc, #40]	; (8002108 <__libc_init_array+0x44>)
 80020de:	1b64      	subs	r4, r4, r5
 80020e0:	10a4      	asrs	r4, r4, #2
 80020e2:	42a6      	cmp	r6, r4
 80020e4:	d105      	bne.n	80020f2 <__libc_init_array+0x2e>
 80020e6:	bd70      	pop	{r4, r5, r6, pc}
 80020e8:	00b3      	lsls	r3, r6, #2
 80020ea:	58eb      	ldr	r3, [r5, r3]
 80020ec:	4798      	blx	r3
 80020ee:	3601      	adds	r6, #1
 80020f0:	e7ee      	b.n	80020d0 <__libc_init_array+0xc>
 80020f2:	00b3      	lsls	r3, r6, #2
 80020f4:	58eb      	ldr	r3, [r5, r3]
 80020f6:	4798      	blx	r3
 80020f8:	3601      	adds	r6, #1
 80020fa:	e7f2      	b.n	80020e2 <__libc_init_array+0x1e>
 80020fc:	08002164 	.word	0x08002164
 8002100:	08002164 	.word	0x08002164
 8002104:	08002164 	.word	0x08002164
 8002108:	08002168 	.word	0x08002168

0800210c <memset>:
 800210c:	0003      	movs	r3, r0
 800210e:	1882      	adds	r2, r0, r2
 8002110:	4293      	cmp	r3, r2
 8002112:	d100      	bne.n	8002116 <memset+0xa>
 8002114:	4770      	bx	lr
 8002116:	7019      	strb	r1, [r3, #0]
 8002118:	3301      	adds	r3, #1
 800211a:	e7f9      	b.n	8002110 <memset+0x4>

0800211c <_init>:
 800211c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800211e:	46c0      	nop			; (mov r8, r8)
 8002120:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002122:	bc08      	pop	{r3}
 8002124:	469e      	mov	lr, r3
 8002126:	4770      	bx	lr

08002128 <_fini>:
 8002128:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800212a:	46c0      	nop			; (mov r8, r8)
 800212c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800212e:	bc08      	pop	{r3}
 8002130:	469e      	mov	lr, r3
 8002132:	4770      	bx	lr
